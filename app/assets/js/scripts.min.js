/*!
 * rpgs
 * RPG System
 * https://github.com/stanosky/rpgs
 * @author Krzysztof Stano
 * @version 1.0.0
 * Copyright 2017. MIT licensed.
 */
(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (global){
'use strict'

module.exports = {
  compileCode,
  compileExpression,
  expose,
  hide
}

let globalObj
if (typeof window !== 'undefined') globalObj = window // eslint-disable-line
else if (typeof global !== 'undefined') globalObj = global // eslint-disable-line
else if (typeof self !== 'undefined') globalObj = self // eslint-disable-line
globalObj.$nxCompileToSandbox = toSandbox
globalObj.$nxCompileCreateBackup = createBackup

const proxies = new WeakMap()
const expressionCache = new Map()
const codeCache = new Map()
const globals = new Set()
const handlers = {has}

function compileExpression (src) {
  if (typeof src !== 'string') {
    throw new TypeError('first argument must be a string')
  }
  let expression = expressionCache.get(src)
  if (!expression) {
    expression = new Function('context', // eslint-disable-line
      `const sandbox = $nxCompileToSandbox(context)
      try { with (sandbox) { return ${src} } } catch (err) {
        if (!(err instanceof TypeError)) throw err
      }`)
    expressionCache.set(src, expression)
  }
  return expression
}

function compileCode (src) {
  if (typeof src !== 'string') {
    throw new TypeError('first argument must be a string')
  }
  let code = codeCache.get(src)
  if (!code) {
    code = new Function('context', 'tempVars', // eslint-disable-line
    `const backup = $nxCompileCreateBackup(context, tempVars)
    Object.assign(context, tempVars)
    const sandbox = $nxCompileToSandbox(context)
    try {
      with (sandbox) { ${src} }
    } finally {
      Object.assign(context, backup)
    }`)
    codeCache.set(src, code)
  }
  return code
}

function expose (...globalNames) {
  for (let globalName of globalNames) {
    globals.add(globalName)
  }
}

function hide (...globalNames) {
  for (let globalName of globalNames) {
    globals.delete(globalName)
  }
}

function toSandbox (obj) {
  if (typeof obj !== 'object') {
    throw new TypeError('first argument must be an object')
  }
  let sandbox = proxies.get(obj)
  if (!sandbox) {
    sandbox = new Proxy(obj, handlers)
    proxies.set(obj, sandbox)
  }
  return sandbox
}

function createBackup (context, tempVars) {
  if (typeof tempVars === 'object') {
    const backup = {}
    for (let key of Object.keys(tempVars)) {
      backup[key] = context[key]
    }
    return backup
  }
}

function has (target, key) {
  return globals.has(key) ? Reflect.has(target, key) : true
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],2:[function(require,module,exports){
module.exports={"actors":[{"class":"ActorNode","uuid":"act1","input":{"dialog":["2d91e675-9c2d-48d9-87d0-b0260b403059"]},"name":"Adam"}],"logic":[{"class":"ScriptNode","uuid":"cond1","output":{"visibility":["c94b4f1d-2114-43ba-b9b1-f45fb026e07f"]},"label":"","script":"return 2>1 && rpgs.getVar('b1') === false;"}],"dialogs":[{"class":"DialogNode","uuid":"dlg1","input":{},"output":{"dialog":["2d91e675-9c2d-48d9-87d0-b0260b403059"]},"children":["tlk0","tlk1","tlk2","tlk3"],"startTalk":"tlk0"}],"links":[{"class":"LinkNode","uuid":"2d91e675-9c2d-48d9-87d0-b0260b403059","input":"act1","output":"dlg1","type":"dialog"},{"class":"LinkNode","uuid":"c94b4f1d-2114-43ba-b9b1-f45fb026e07f","input":"tlk0ans1","output":"cond1","type":"visibility"},{"class":"LinkNode","uuid":"3184673f-06e6-41dc-ac72-89b2e58e3803","input":"tlk1","output":"tlk0ans1","type":"goto"},{"class":"LinkNode","uuid":"0fb1d66a-b3e7-49af-b802-12529115965b","input":"tlk2","output":"tlk0ans2","type":"goto"},{"class":"LinkNode","uuid":"92f9fb79-f21a-4bf8-bfa4-7b1bbfc64b7c","input":"tlk3","output":"tlk0ans3","type":"goto"}],"talks":[{"class":"TalkNode","uuid":"tlk0","input":{},"children":["tlk0ans1","tlk0ans2","tlk0ans3"],"text":"This is talk 0."},{"class":"TalkNode","uuid":"tlk1","input":{"goto":["3184673f-06e6-41dc-ac72-89b2e58e3803"]},"children":["tlk1ans1"],"text":"This is talk 1."},{"class":"TalkNode","uuid":"tlk2","input":{"goto":["0fb1d66a-b3e7-49af-b802-12529115965b"]},"children":["tlk2ans1"],"text":"This is talk 2."},{"class":"TalkNode","uuid":"tlk3","input":{"goto":["92f9fb79-f21a-4bf8-bfa4-7b1bbfc64b7c"]},"children":["tlk3ans1"],"text":"This is talk 3."}],"answers":[{"class":"AnswerNode","uuid":"tlk0ans1","input":{"visibility":["c94b4f1d-2114-43ba-b9b1-f45fb026e07f"]},"output":{"goto":["3184673f-06e6-41dc-ac72-89b2e58e3803"]},"text":"Answer1"},{"class":"AnswerNode","uuid":"tlk0ans2","input":{},"output":{"goto":["0fb1d66a-b3e7-49af-b802-12529115965b"]},"text":"Answer2"},{"class":"AnswerNode","uuid":"tlk0ans3","input":{},"output":{"goto":["92f9fb79-f21a-4bf8-bfa4-7b1bbfc64b7c"]},"text":"Answer3"},{"class":"AnswerNode","uuid":"tlk1ans1","input":{},"output":{},"text":"Answer1"},{"class":"AnswerNode","uuid":"tlk2ans1","input":{},"output":{},"text":"Answer1"},{"class":"AnswerNode","uuid":"tlk3ans1","input":{},"output":{},"text":"Answer1"}],"variables":[{"class":"VariableNode","uuid":"b1","input":{},"output":{},"type":"boolean","value":false},{"class":"VariableNode","uuid":"s1","input":{},"output":{},"type":"string","value":"This is message from compiled code!"},{"class":"VariableNode","uuid":"n1","input":{},"output":{},"type":"number","value":56}]}

},{}],3:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
//import InventoryNode  from './actors/InventoryNode';


var _Utils = require('./core/Utils');

var _Utils2 = _interopRequireDefault(_Utils);

var _ErrorHandler = require('./core/ErrorHandler');

var _ErrorHandler2 = _interopRequireDefault(_ErrorHandler);

var _ErrorCode = require('./core/ErrorCode');

var _ErrorCode2 = _interopRequireDefault(_ErrorCode);

var _BaseNode = require('./core/BaseNode');

var _BaseNode2 = _interopRequireDefault(_BaseNode);

var _ActorNode = require('./actors/ActorNode');

var _ActorNode2 = _interopRequireDefault(_ActorNode);

var _ScriptNode = require('./logic/ScriptNode');

var _ScriptNode2 = _interopRequireDefault(_ScriptNode);

var _AnswerNode = require('./dialogs/AnswerNode');

var _AnswerNode2 = _interopRequireDefault(_AnswerNode);

var _DialogNode = require('./dialogs/DialogNode');

var _DialogNode2 = _interopRequireDefault(_DialogNode);

var _TalkNode = require('./dialogs/TalkNode');

var _TalkNode2 = _interopRequireDefault(_TalkNode);

var _QuestNode = require('./quests/QuestNode');

var _QuestNode2 = _interopRequireDefault(_QuestNode);

var _TaskNode = require('./quests/TaskNode');

var _TaskNode2 = _interopRequireDefault(_TaskNode);

var _VariableNode = require('./variables/VariableNode');

var _VariableNode2 = _interopRequireDefault(_VariableNode);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var KEY_ACTORS = 'actors';
var KEY_ANSWERS = 'answers';
var KEY_LOGIC = 'logic';
var KEY_DIALOGS = 'dialogs';
var KEY_SCRIPTS = 'scripts';
var KEY_TALKS = 'talks';
var KEY_TASKS = 'tasks';
var KEY_QUESTS = 'quests';
var KEY_VARIABLES = 'variables';

var RPGSystem = function RPGSystem(data, editor) {
  var _objectPool = [],
      _editor = editor || null,
      _errorHandler = new _ErrorHandler2.default(_editor),
      _context = null,
      _lastChild = null,
      _parentHistory = [],
      _tempWires = [];

  function _nodeFactory(data, rpgs) {
    var className = data.class;
    switch (className) {
      case 'ActorNode':
        return new _ActorNode2.default(data, rpgs);
      case 'ScriptNode':
        return new _ScriptNode2.default(data, rpgs);
      case 'AnswerNode':
        return new _AnswerNode2.default(data, rpgs);
      case 'DialogNode':
        return new _DialogNode2.default(data, rpgs);
      case 'TalkNode':
        return new _TalkNode2.default(data, rpgs);
      case 'QuestNode':
        return new _QuestNode2.default(data, rpgs);
      case 'TaskNode':
        return new _TaskNode2.default(data, rpgs);
      case 'VariableNode':
        return new _VariableNode2.default(data, rpgs);
      default:
        _errorHandler.showMsg(_ErrorCode2.default.CLASS_NOT_DEFINED, { class: className });
        return null;
    }
  }

  var _findNode = function _findNode(nodeId) {
    for (var i = 0; i < _objectPool.length; i++) {
      if (_objectPool[i].getId() === nodeId) return _objectPool[i];
    }
    return null;
  },
      _removeNode = function _removeNode(id) {
    var index = _Utils2.default.getIndexById(_objectPool, id);
    var isNodeFound = index > -1;
    if (isNodeFound) {
      var node = _objectPool.splice(index, 1)[0];
      node.dispose();
    }
    return isNodeFound;
  },
      _setConnection = function _setConnection(type, nodeId1, nodeId2) {
    if (nodeId1 === nodeId2) {
      _errorHandler.showMsg(_ErrorCode2.default.CONNECTION_TO_ITSELF, { node: nodeId1 });
    }
    var node1 = _findNode(nodeId1);
    var node2 = _findNode(nodeId2);
    if (node2 === null) {
      _tempWires.push({ type: type, targetNode: nodeId1, referenceNode: nodeId2 });
      return;
    }
    if (node1.canSetWireType(type)) {
      node1.setWire(type, node2.getId());
    } else {
      _errorHandler.showMsg(_ErrorCode2.default.IMPROPER_CONNECTION, {
        type: type,
        node1: nodeId1,
        node2: nodeId2
      });
    }
  };

  ////////////////////////////////////////////////////////////////
  //METHOD CHAINING
  ////////////////////////////////////////////////////////////////

  /**
   * Method used to check passed parameters and later merge them into
   * single object.
   * @param  {string} id      Mandatory id of node.
   * @param  {object} params  Optional parameters.
   * @return {object} Parameters merged into object.
   */
  function _checkAndMergeParams() {
    var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _errorHandler.showMsg(_ErrorCode2.default.MANDATORY_PARAM, { param: 'id' });
    var params = arguments[1];

    if (typeof id !== 'string') {
      _errorHandler.showMsg(_ErrorCode2.default.INCORRECT_TYPE, { type: 'string' });
    }
    if (params !== undefined && (typeof params === 'undefined' ? 'undefined' : _typeof(params)) !== 'object') {
      _errorHandler.showMsg(_ErrorCode2.default.INCORRECT_TYPE, { type: 'object' });
    } else if (params === undefined) {
      params = {};
    }
    params.uuid = id;
    return params;
  }

  function _chainNodeCreator(id, params, asChild, className) {
    //First, we check that id and params are valid.
    params = _checkAndMergeParams(id, params);
    //Class name for later usage.
    params.class = className;
    _nodeCreator(params, asChild);
    return _self;
  }

  /**
   * This method helps in the creation of nodes. Its focus on proper
   * placement of nodes in tree.
   * @param  {object} params  Parameters of created node.
   * @param  {boolean} asChild Determines if node should be added as child
   * of another node or as an independent node.
   */
  function _nodeCreator(params, asChild) {
    //Test if node should be added as child or parent.
    if (asChild) {
      //If last added child was not null then we must check additional conditions.
      if (_lastChild !== null) {
        //If constructor name of previous child node, is equal to name of class,
        //whose we try to create, it means node should be added to current parent.
        if (_lastChild.constructor.name === params.class) {
          createChildNode(params);
        }
        //If names of constructors not match, then we must check if new node
        //can be added as child to our previous child.
        else if (_lastChild.canAddChild(params.class)) {
            _parentHistory.unshift(_lastChild);
            createChildNode(params);
          }
          //Finally if previous conditions are false we try go back to previous
          //parent node.
          else {
              _lastChild = _parentHistory.shift() || null;
              _nodeCreator(params, asChild);
            }
      }
      //If last child is null, then we check if node can be added to current
      //parent node.
      else if (_parentHistory.length > 0 && _parentHistory[0].canAddChild(params.class)) {
          createChildNode(params);
        }
        //If last child and last parent is equal to null, then new child node
        //cant be added, so we throw error.
        else {
            _errorHandler.showMsg(_ErrorCode2.default.INCOMPATIBLE_CHILD, {
              child: params.class,
              parent: _parentHistory.length > 0 ? _parentHistory[0].constructor.name : 'null'
            });
          }
    } else {
      //If node is added as parent, then last child is set to null
      //and parent history is cleared.
      _lastChild = null;
      _parentHistory.length = 0;
      //After that, new node is created.
      var node = _nodeFactory(params, _self);
      _parentHistory = [node];
      _objectPool.push(node);
    }

    _getWaitingWiresForNode(params.uuid).map(function (wire) {
      _setConnection(wire.type, wire.targetNode, wire.referenceNode);
    });

    function createChildNode(nodeParams) {
      //We create a new node, and then set as the last child.
      _lastChild = _nodeFactory(nodeParams, _self);
      //Then we add our freshly created node to its parent.
      _parentHistory[0].addChild(_lastChild.getId());
      //Finally new node is added to main storage object.
      _objectPool.push(_lastChild);
    }
  }

  function _getWaitingWiresForNode(nodeId) {
    var wires = [];
    for (var i = _tempWires.length - 1; i >= 0; i--) {
      if (_tempWires[i].referenceNode === nodeId) {
        wires.push(_tempWires.splice(i, 1)[0]);
      }
    }
    return wires;
  }

  function _getNodesByClass(className) {
    return _objectPool.map(function (node) {
      return node.constructor.name === className;
    });
  }

  /**
   * Helper method that is used to remove nodes from object pool
   * and reset context of "method chaining" algorithm.
   * @param  {string} id  Id of node to be removed.
   */
  var _chainNodeRemover = function _chainNodeRemover(id) {
    _lastChild = null;
    _parentHistory.length = 0;
    _removeNode(id);
    return this;
  },
      _addNode = function _addNode(className, params, asChild) {
    params.class = className;
    _nodeCreator(params, asChild);
    return this;
  },
      _addActor = function _addActor(id, params) {
    return _chainNodeCreator(id, params, false, 'ActorNode');
  },
      _addQuest = function _addQuest(id, params) {
    return _chainNodeCreator(id, params, false, 'QuestNode');
  },
      _addDialog = function _addDialog(id, params) {
    return _chainNodeCreator(id, params, false, 'DialogNode');
  },
      _addCondition = function _addCondition(id, params) {
    return _chainNodeCreator(id, params, false, 'ScriptNode');
  },
      _addVariable = function _addVariable(id, params) {
    return _chainNodeCreator(id, params, false, 'VariableNode');
  },
      _addTalk = function _addTalk(id, params) {
    return _chainNodeCreator(id, params, true, 'TalkNode');
  },
      _addAnswer = function _addAnswer(id, params) {
    return _chainNodeCreator(id, params, true, 'AnswerNode');
  },
      _setWire = function _setWire(type, referenceNodeId) {
    var targetNode = _lastChild;
    if (targetNode === null && _parentHistory.length > 0) {
      targetNode = _parentHistory[0];
    } else {
      /*_errorHandler.showMsg(ErrorCode.INCOMPATIBLE_CHILD,{
        child:className,
        parent: _parentHistory.length > 0
              ? _parentHistory[0].constructor.name
              : 'null'
      });*/
    }
    _setConnection(type, targetNode.getId(), referenceNodeId);
    return this;
  },


  ////////////////////////////////////////////////////////////////
  //GETTERS
  ////////////////////////////////////////////////////////////////
  _getActors = function _getActors() {
    return _getNodesByClass('ActorNode');
  },
      _getConditions = function _getConditions() {
    return _getNodesByClass('ScriptNode');
  },
      _getDialogs = function _getDialogs() {
    return _getNodesByClass('DialogNode');
  },
      _getQuests = function _getQuests() {
    return _getNodesByClass('QuestNode');
  },
      _getVariables = function _getVariables() {
    return _getNodesByClass('VariableNode');
  },


  ////////////////////////////////////////////////////////////////
  //MISCALINEUS
  ////////////////////////////////////////////////////////////////

  _setVar = function _setVar(variableId, value) {
    var _var = _findNode(variableId);
    if (_var !== null) _var.setValue(value);
  },
      _getVar = function _getVar(variableId) {
    var _var = _findNode(variableId);
    return _var !== null ? _var.getValue() : undefined;
  },
      _serializeData = function _serializeData() {
    var data = _objectPool.map(function (obj) {
      return obj.getData ? obj.getData() : obj;
    });
    return JSON.stringify(data);
  };

  var _self = {
    ////////////////////////////////////////////
    //General node methods
    ////////////////////////////////////////////
    findNode: _findNode,
    addNode: _addNode,
    removeNode: _removeNode,

    ////////////////////////////////////////////
    //Link creation methods
    ////////////////////////////////////////////
    setWire: _setWire,

    ////////////////////////////////////////////
    //Chainable methods
    ////////////////////////////////////////////
    addActor: _addActor,
    addQuest: _addQuest,
    addDialog: _addDialog,
    addCondition: _addCondition,
    addVariable: _addVariable,
    addTalk: _addTalk,
    addAnswer: _addAnswer,

    ////////////////////////////////////////////
    //Getter methods
    ////////////////////////////////////////////
    getActors: _getActors,
    getConditions: _getConditions,
    getDialogs: _getDialogs,
    getQuests: _getQuests,
    getVariables: _getVariables,

    ////////////////////////////////////////////
    //Miscalineus methods
    ////////////////////////////////////////////
    setVar: _setVar,
    getVar: _getVar,
    serializeData: _serializeData
  };
  if (data) _objectPool = data.map(function (d) {
    return _nodeFactory(d, _self);
  });

  return _self;
};
module.exports = RPGSystem;

},{"./actors/ActorNode":4,"./core/BaseNode":5,"./core/ErrorCode":7,"./core/ErrorHandler":8,"./core/Utils":10,"./dialogs/AnswerNode":11,"./dialogs/DialogNode":12,"./dialogs/TalkNode":14,"./logic/ScriptNode":15,"./quests/QuestNode":16,"./quests/TaskNode":18,"./variables/VariableNode":19}],4:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _BaseNode2 = require('../core/BaseNode');

var _BaseNode3 = _interopRequireDefault(_BaseNode2);

var _Prop = require('../core/Prop');

var _Prop2 = _interopRequireDefault(_Prop);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ActorNode = function () {
  //Weak maps are new feature to JavaScript. We can store private
  //object properties in key/value pairs using our instance as the key,
  //and our class can capture those key/value maps in a closure.
  var _name = new WeakMap();
  var _dialog = new WeakMap();
  //let _inventory = new WeakMap();


  return function (_BaseNode) {
    _inherits(ActorNode, _BaseNode);

    function ActorNode(data) {
      _classCallCheck(this, ActorNode);

      var _this = _possibleConstructorReturn(this, (ActorNode.__proto__ || Object.getPrototypeOf(ActorNode)).call(this, data));

      _name.set(_this, data ? data.name : '');
      _dialog.set(_this, data ? data.dialog : '');
      //_inventory.set(this,data.inventory ? );
      return _this;
    }

    _createClass(ActorNode, [{
      key: 'getData',
      value: function getData() {
        var data = _get(ActorNode.prototype.__proto__ || Object.getPrototypeOf(ActorNode.prototype), 'getData', this).call(this);
        data.name = this.getName();
        data.dialog = this.getDialog();
        return data;
      }
    }, {
      key: 'setName',
      value: function setName(value) {
        _name.set(this, value);
      }
    }, {
      key: 'getName',
      value: function getName() {
        return _name.get(this);
      }
    }, {
      key: 'getDialog',
      value: function getDialog() {
        return _dialog.get(this);
      }

      /*getInventory() {
        return _inventory.get(this);
      }*/

    }, {
      key: 'canSetWireType',
      value: function canSetWireType(type) {
        switch (type) {
          case _Prop2.default.DIALOG:
            return this.getWires(_Prop2.default.DIALOG).length === 0;
          default:
            return false;
        }
      }
    }, {
      key: 'dispose',
      value: function dispose() {
        _name.delete(this);
        _dialog.delete(this);
        //_inventory.delete(this);
        _get(ActorNode.prototype.__proto__ || Object.getPrototypeOf(ActorNode.prototype), 'dispose', this).call(this);
      }
    }]);

    return ActorNode;
  }(_BaseNode3.default);
}();

module.exports = ActorNode;

},{"../core/BaseNode":5,"../core/Prop":9}],5:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Utils = require('./Utils');

var _Prop = require('./Prop');

var _Prop2 = _interopRequireDefault(_Prop);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var BaseNode = function () {
  //Weak maps are new feature to JavaScript. We can store private
  //object properties in key/value pairs using our instance as the key,
  //and our class can capture those key/value maps in a closure.
  var _rpgs = new WeakMap();
  var _uuid = new WeakMap();
  var _wires = new WeakMap();

  return function () {
    function BaseNode(data, rpgs) {
      _classCallCheck(this, BaseNode);

      _rpgs.set(this, rpgs);
      //If uuid not present, then by default we assign Universally Unique ID.
      _uuid.set(this, data.uuid ? data.uuid : _Utils.UUID.generate());
      _wires.set(this, data.wires ? data.wires : {});
    }

    _createClass(BaseNode, [{
      key: 'getRPGS',
      value: function getRPGS() {
        return _rpgs.get(this);
      }
    }, {
      key: 'setId',
      value: function setId(value) {
        _uuid.set(this, value);
      }
    }, {
      key: 'getId',
      value: function getId() {
        return _uuid.get(this);
      }
    }, {
      key: '_checkCondition',
      value: function _checkCondition(prop) {
        var nodeId = this.getWires(prop)[0];
        var scriptNode = this.getRPGS().findNode(nodeId);
        return scriptNode != null && scriptNode.execute ? scriptNode.execute() : true;
      }

      /**
       * Returns boolean that reflects visiblility state of node.
       * @return {Boolean} Visibility state
       */

    }, {
      key: 'isVisible',
      value: function isVisible() {
        return this._checkCondition(_Prop2.default.VISIBILITY);
      }

      /**
       * Returns boolean that reflects activity state of node.
       * @return {Boolean} Active state
       */

    }, {
      key: 'isActive',
      value: function isActive() {
        return this._checkCondition(_Prop2.default.ACTIVITY);
      }
    }, {
      key: 'getData',
      value: function getData() {
        return {
          class: this.constructor.name,
          uuid: this.getId(),
          wires: _wires.get(this)
        };
      }
    }, {
      key: 'canAddChild',
      value: function canAddChild(type) {
        return false;
      }
    }, {
      key: 'addChild',
      value: function addChild(childId) {}
    }, {
      key: 'removeChild',
      value: function removeChild(index) {}
    }, {
      key: 'getChild',
      value: function getChild(index) {
        return null;
      }
    }, {
      key: 'getChildren',
      value: function getChildren() {
        return [];
      }
    }, {
      key: '_removeChildren',
      value: function _removeChildren() {}
    }, {
      key: 'canSetWireType',
      value: function canSetWireType(type) {
        return false;
      }
    }, {
      key: '_setWire',
      value: function _setWire(obj, type, nodeId) {
        if (!obj.hasOwnProperty(type)) {
          obj[type] = [];
        }
        obj[type].push(nodeId);
        return obj;
      }
    }, {
      key: 'setWire',
      value: function setWire(type, nodeId) {
        _wires.set(this, this._setWire(_wires.get(this), type, nodeId));
      }
    }, {
      key: '_getWires',
      value: function _getWires(obj, type) {
        if (type) return !obj.hasOwnProperty(type) ? [] : obj[type];else return obj;
      }
    }, {
      key: 'getWires',
      value: function getWires(type) {
        return this._getWires(_wires.get(this), type);
      }
    }, {
      key: '_removeWire',
      value: function _removeWire(obj, type, nodeId) {
        if (obj.hasOwnProperty(type)) {
          obj[type] = Utils.removeObjectFromArray(obj[type], nodeId);
        }
        return obj;
      }
    }, {
      key: 'removeWire',
      value: function removeWire(type, nodeId) {
        _wires.set(this, this._removeWire(_wires.get(this), type, nodeId));
      }
    }, {
      key: 'dispose',
      value: function dispose() {
        _rpgs.delete(this);
        _uuid.delete(this);
        _wires.delete(this);
        _removeChildren();
      }
    }]);

    return BaseNode;
  }();
}();
module.exports = BaseNode;

},{"./Prop":9,"./Utils":10}],6:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _BaseNode2 = require('../core/BaseNode');

var _BaseNode3 = _interopRequireDefault(_BaseNode2);

var _Utils = require('../core/Utils');

var _Utils2 = _interopRequireDefault(_Utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var CompoundNode = function () {
  var _children = new WeakMap();

  return function (_BaseNode) {
    _inherits(CompoundNode, _BaseNode);

    function CompoundNode(data, rpgs) {
      _classCallCheck(this, CompoundNode);

      var _this = _possibleConstructorReturn(this, (CompoundNode.__proto__ || Object.getPrototypeOf(CompoundNode)).call(this, data, rpgs));

      _children.set(_this, data.children ? data.children : []);
      return _this;
    }

    _createClass(CompoundNode, [{
      key: 'getData',
      value: function getData() {
        var data = _get(CompoundNode.prototype.__proto__ || Object.getPrototypeOf(CompoundNode.prototype), 'getData', this).call(this);
        data.children = this.getChildren();
        return data;
      }
    }, {
      key: 'addChild',
      value: function addChild(childId) {
        var children = _children.get(this);
        _children.set(this, _Utils2.default.addObjectToArray(children, childId));
      }
    }, {
      key: 'removeChild',
      value: function removeChild(index) {
        var children = _children.get(this);
        _children.set(this, children.splice(index, 1));
      }
    }, {
      key: 'getChild',
      value: function getChild(index) {
        var children = _children.get(this);
        return children.length > index ? children[index] : null;
      }
    }, {
      key: 'getChildren',
      value: function getChildren() {
        return _children.get(this);
      }
    }, {
      key: '_removeChildren',
      value: function _removeChildren() /*key*/{
        //Add valid implementation...
        //this.removeChildrenFrom(_children.get(this),key);
      }
    }, {
      key: 'dispose',
      value: function dispose() {
        _children.delete(this);
        _get(CompoundNode.prototype.__proto__ || Object.getPrototypeOf(CompoundNode.prototype), 'dispose', this).call(this);
      }
    }]);

    return CompoundNode;
  }(_BaseNode3.default);
}();
module.exports = CompoundNode;

},{"../core/BaseNode":5,"../core/Utils":10}],7:[function(require,module,exports){
"use strict";

var NODE_NOT_EXISTS = 0;
var CLASS_NOT_DEFINED = 1;
var CONNECTION_TO_ITSELF = 2;
var IMPROPER_CONNECTION = 3;
var OBJECT_NOT_FOUND = 4;
var MANDATORY_PARAM = 5;
var INCORRECT_TYPE = 6;
var INCORRECT_PARENT_NODE = 7;
var INCORRECT_LINK_TARGET = 8;
var INCOMPATIBLE_CHILD = 9;

exports.NODE_NOT_EXISTS = NODE_NOT_EXISTS;
exports.CLASS_NOT_DEFINED = CLASS_NOT_DEFINED;
exports.CONNECTION_TO_ITSELF = CONNECTION_TO_ITSELF;
exports.IMPROPER_CONNECTION = IMPROPER_CONNECTION;
exports.OBJECT_NOT_FOUND = OBJECT_NOT_FOUND;
exports.MANDATORY_PARAM = MANDATORY_PARAM;
exports.INCORRECT_TYPE = INCORRECT_TYPE;
exports.INCORRECT_PARENT_NODE = INCORRECT_PARENT_NODE;
exports.INCORRECT_LINK_TARGET = INCORRECT_LINK_TARGET;
exports.INCOMPATIBLE_CHILD = INCOMPATIBLE_CHILD;

},{}],8:[function(require,module,exports){
"use strict";

var _ErrorCode = require('./ErrorCode');

var _ErrorCode2 = _interopRequireDefault(_ErrorCode);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ErrorHandler = function ErrorHandler(editor) {
  return {
    showMsg: function showMsg(errorCode, params) {
      var msg = '';
      switch (errorCode) {
        case _ErrorCode2.default.NODE_NOT_EXISTS:
          msg = 'Node of type ' + params.type + ' is not defined.';
          break;
        case _ErrorCode2.default.CLASS_NOT_DEFINED:
          msg = 'Class ' + params.class + ' is not defined.';
          break;
        case _ErrorCode2.default.CONNECTION_TO_ITSELF:
          msg = 'Cannot connect node "' + params.node + '" to itself.';
          break;
        case _ErrorCode2.default.IMPROPER_CONNECTION:
          msg = 'Cannot create connection of type "' + params.type + '" from node id "' + params.node1 + '" to node id "' + params.node2 + '".';
          break;
        case _ErrorCode2.default.OBJECT_NOT_FOUND:
          msg = 'Cannot find object with id "' + params.id + '"';
          break;
        case _ErrorCode2.default.MANDATORY_PARAM:
          msg = 'Parameter "' + params.param + '" was expected but instead got undefined.';
          break;
        case _ErrorCode2.default.INCORRECT_TYPE:
          msg = 'Wrong type of argument. Expected "' + params.type + '"';
          break;
        case _ErrorCode2.default.INCORRECT_PARENT_NODE:
          msg = 'Node of type "' + params.child + '" can be added only to "' + params.parent + '" node.';
          break;
        case _ErrorCode2.default.INCORRECT_LINK_TARGET:
          msg = 'Cannot create link connection to null node.';
          break;
        case _ErrorCode2.default.INCOMPATIBLE_CHILD:
          msg = 'Cannot add child of type "' + params.child + '" into parent of type "' + params.parent + '".';
          break;
        default:
          msg = 'Unknown error code passed: ' + errorCode;
      }
      if (editor) {
        editor.showMsg(msg);
      } else {
        throw new Error(msg);
        //add warning mode?
      }
    }
  };
};
module.exports = ErrorHandler;

},{"./ErrorCode":7}],9:[function(require,module,exports){
"use strict";

var VISIBILITY = 'visibility';
var ACTIVITY = 'activity';
var ACTION = 'action';
var GOTO = 'goto';
var DIALOG = 'dialog';

exports.VISIBILITY = VISIBILITY;
exports.ACTIVITY = ACTIVITY;
exports.ACTION = ACTION;
exports.GOTO = GOTO;
exports.DIALOG = DIALOG;

},{}],10:[function(require,module,exports){
"use strict";

/**
 * Fast UUID generator, RFC4122 version 4 compliant.
 * @author Jeff Ward (jcward.com).
 * @license MIT license
 * @link http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136
 **/

var UUID = function () {
  var self = {};
  var lut = [];for (var i = 0; i < 256; i++) {
    lut[i] = (i < 16 ? '0' : '') + i.toString(16);
  }
  self.generate = function () {
    var d0 = Math.random() * 0xffffffff | 0;
    var d1 = Math.random() * 0xffffffff | 0;
    var d2 = Math.random() * 0xffffffff | 0;
    var d3 = Math.random() * 0xffffffff | 0;
    return lut[d0 & 0xff] + lut[d0 >> 8 & 0xff] + lut[d0 >> 16 & 0xff] + lut[d0 >> 24 & 0xff] + '-' + lut[d1 & 0xff] + lut[d1 >> 8 & 0xff] + '-' + lut[d1 >> 16 & 0x0f | 0x40] + lut[d1 >> 24 & 0xff] + '-' + lut[d2 & 0x3f | 0x80] + lut[d2 >> 8 & 0xff] + '-' + lut[d2 >> 16 & 0xff] + lut[d2 >> 24 & 0xff] + lut[d3 & 0xff] + lut[d3 >> 8 & 0xff] + lut[d3 >> 16 & 0xff] + lut[d3 >> 24 & 0xff];
  };
  return self;
}();

exports.UUID = UUID;

var indexOfObject = function indexOfObject(array, obj) {
  for (var i = 0; i < array.length; i++) {
    if (array[i] === obj) return i;
  }
  return -1;
};

exports.indexOfObject = indexOfObject;

var getIndexById = function getIndexById(array, id) {
  for (var i = 0; i < array.length; i++) {
    if (array[i].getId() === id) return i;
  }
  return -1;
};
exports.getIndexById = getIndexById;

exports.addObjectToArray = function (array, obj, expectedType) {
  if (expectedType !== undefined && expectedType !== null) {
    if (expectedType.isPrototypeOf(obj)) {
      throw new Error('Wrong type of object passed. Expected ' + expectedType.constructor.name + ' object.');
    }
  }
  if (indexOfObject(array, obj) === -1) {
    array.push(obj);
  }
  return array;
};

/*exports.removeObjectById = function(array,id) {
  let index = getIndexById(array,id);
  if(index !== -1) {
    let spliced = array.splice(index,1);
    if(spliced.dispose) spliced.dispose();
  }
  return array;
}*/

exports.removeObjectFromArray = function (array, obj) {
  var index = indexOfObject(array, obj);
  if (index !== -1) {
    var spliced = array.splice(index, 1);
    if (spliced.dispose) spliced.dispose();
  }
  return array;
};

},{}],11:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _BaseNode2 = require('../core/BaseNode');

var _BaseNode3 = _interopRequireDefault(_BaseNode2);

var _Prop = require('../core/Prop');

var _Prop2 = _interopRequireDefault(_Prop);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var AnswerNode = function () {
  //Weak maps are new feature to JavaScript. We can store private
  //object properties in key/value pairs using our instance as the key,
  //and our class can capture those key/value maps in a closure.
  var _text = new WeakMap();

  return function (_BaseNode) {
    _inherits(AnswerNode, _BaseNode);

    function AnswerNode(data, rpgs) {
      _classCallCheck(this, AnswerNode);

      var _this = _possibleConstructorReturn(this, (AnswerNode.__proto__ || Object.getPrototypeOf(AnswerNode)).call(this, data, rpgs));

      _text.set(_this, data.text ? data.text : '');
      return _this;
    }

    _createClass(AnswerNode, [{
      key: 'getData',
      value: function getData() {
        var data = _get(AnswerNode.prototype.__proto__ || Object.getPrototypeOf(AnswerNode.prototype), 'getData', this).call(this);
        data.text = this.getText();
        return data;
      }
    }, {
      key: 'setText',
      value: function setText(value) {
        _text.set(this, value);
      }
    }, {
      key: 'getText',
      value: function getText() {
        return _text.get(this);
      }
    }, {
      key: 'getTalk',
      value: function getTalk() {
        return this.getWires(_Prop2.default.GOTO)[0];
      }
    }, {
      key: 'canSetWireType',
      value: function canSetWireType(type) {
        switch (type) {
          case _Prop2.default.VISIBILITY:
            return this.getWires(_Prop2.default.VISIBILITY).length === 0;
          case _Prop2.default.ACTIVITY:
            return this.getWires(_Prop2.default.ACTIVITY).length === 0;
          case _Prop2.default.GOTO:
            return this.getWires(_Prop2.default.GOTO).length === 0;
          default:
            return false;
        }
      }
    }, {
      key: 'dispose',
      value: function dispose() {
        _text.delete(this);
        _get(AnswerNode.prototype.__proto__ || Object.getPrototypeOf(AnswerNode.prototype), 'dispose', this).call(this);
      }
    }]);

    return AnswerNode;
  }(_BaseNode3.default);
}();
module.exports = AnswerNode;

},{"../core/BaseNode":5,"../core/Prop":9}],12:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _CompoundNode2 = require('../core/CompoundNode');

var _CompoundNode3 = _interopRequireDefault(_CompoundNode2);

var _Prop = require('../core/Prop');

var _Prop2 = _interopRequireDefault(_Prop);

var _Utils = require('../core/Utils');

var _Utils2 = _interopRequireDefault(_Utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var KEY_TALKS = 'talks';

var DialogNode = function () {
  var _start = new WeakMap();

  return function (_CompoundNode) {
    _inherits(DialogNode, _CompoundNode);

    function DialogNode(data, rpgs) {
      _classCallCheck(this, DialogNode);

      var _this = _possibleConstructorReturn(this, (DialogNode.__proto__ || Object.getPrototypeOf(DialogNode)).call(this, data, rpgs));

      _start.set(_this, data.startTalk ? data.startTalk : '');
      return _this;
    }

    _createClass(DialogNode, [{
      key: 'getData',
      value: function getData() {
        var data = _get(DialogNode.prototype.__proto__ || Object.getPrototypeOf(DialogNode.prototype), 'getData', this).call(this);
        data.startTalk = this.getStartTalk();
        return data;
      }
    }, {
      key: 'canAddChild',
      value: function canAddChild(type) {
        return type === 'TalkNode';
      }
    }, {
      key: 'setStartTalk',
      value: function setStartTalk(talkId) {
        _start.set(this, talkId);
      }
    }, {
      key: 'getStartTalk',
      value: function getStartTalk() {
        return _start.get(this);
      }
    }, {
      key: 'canSetWireType',
      value: function canSetWireType(type) {
        switch (type) {
          case _Prop2.default.VISIBILITY:
            return this.getWires(_Prop2.default.VISIBILITY).length === 0;
          case _Prop2.default.ACTIVITY:
            return this.getWires(_Prop2.default.ACTIVITY).length === 0;
          default:
            return false;
        }
      }
    }, {
      key: 'dispose',
      value: function dispose() {
        _start.delete(this);
        _get(DialogNode.prototype.__proto__ || Object.getPrototypeOf(DialogNode.prototype), 'dispose', this).call(this);
      }
    }]);

    return DialogNode;
  }(_CompoundNode3.default);
}();
module.exports = DialogNode;

},{"../core/CompoundNode":6,"../core/Prop":9,"../core/Utils":10}],13:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var DialogWalker = function () {
  var _currTalk = new WeakMap();
  var _rpgs = new WeakMap();
  var _dialog = new WeakMap();

  return function () {
    function DialogWalker(rpgs) {
      _classCallCheck(this, DialogWalker);

      _rpgs.set(this, rpgs);
      _dialog.set(this, null);
      _currTalk.set(this, null);
    }

    _createClass(DialogWalker, [{
      key: 'reset',
      value: function reset() {
        var dialog = _dialog.get(this);
        if (dialog !== null) {
          this.setTalk(dialog.getStartTalk());
        }
      }
    }, {
      key: '_findNode',
      value: function _findNode(nodeId) {
        return _rpgs.get(this).findNode(nodeId);
      }
    }, {
      key: 'setDialog',
      value: function setDialog(dialogId) {
        var dialog = this._findNode(dialogId);
        if (dialog === null) {
          throw new Error('DialogNode with the id "' + dialogId + '" does not exists.');
        }
        _dialog.set(this, dialog);
        this.reset();
      }
    }, {
      key: 'setTalk',
      value: function setTalk(talkId) {
        console.log('setTalk', talkId);
        var talk = this._findNode(talkId);
        if (talk === null) {
          throw new Error('TalkNode with the id "' + talkId + '" does not exists.');
        }
        _currTalk.set(this, talk);
      }
    }, {
      key: 'getConversation',
      value: function getConversation() {
        var _this = this;

        var conversation = {};
        conversation.text = _currTalk.get(this).getText();
        var children = _currTalk.get(this).getChildren();
        conversation.options = children.map(function (answerId) {
          var answer = _this._findNode(answerId);
          return {
            id: answer.getId(),
            text: answer.getText(),
            isActive: answer.isActive(),
            isVisible: answer.isVisible()
          };
        });
        return conversation;
      }
    }, {
      key: 'selectOption',
      value: function selectOption(id) {
        var children = _currTalk.get(this).getChildren();
        var answerId = children.filter(function (currId, index, array) {
          return currId === id;
        });
        if (answerId[0] !== undefined) {
          var answerNode = this._findNode(answerId[0]);
          console.log('selectOption::answerNode', answerNode, answerNode.getId());
          if (answerNode !== null) this.setTalk(answerNode.getTalk());
        }
      }
    }]);

    return DialogWalker;
  }();
}();
module.exports = DialogWalker;

},{}],14:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _Utils = require('../core/Utils');

var _Utils2 = _interopRequireDefault(_Utils);

var _CompoundNode2 = require('../core/CompoundNode');

var _CompoundNode3 = _interopRequireDefault(_CompoundNode2);

var _Prop = require('../core/Prop');

var _Prop2 = _interopRequireDefault(_Prop);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TalkNode = function () {

  var _text = new WeakMap();

  return function (_CompoundNode) {
    _inherits(TalkNode, _CompoundNode);

    function TalkNode(data, rpgs) {
      _classCallCheck(this, TalkNode);

      var _this = _possibleConstructorReturn(this, (TalkNode.__proto__ || Object.getPrototypeOf(TalkNode)).call(this, data, rpgs));

      _text.set(_this, data.text ? data.text : '');
      return _this;
    }

    _createClass(TalkNode, [{
      key: 'getData',
      value: function getData() {
        var data = _get(TalkNode.prototype.__proto__ || Object.getPrototypeOf(TalkNode.prototype), 'getData', this).call(this);
        data.text = this.getText();
        return data;
      }
    }, {
      key: 'setText',
      value: function setText(value) {
        _text.set(this, value);
      }
    }, {
      key: 'getText',
      value: function getText() {
        return _text.get(this);
      }
    }, {
      key: 'canAddChild',
      value: function canAddChild(type) {
        return type === 'AnswerNode';
      }
    }, {
      key: 'canSetWireType',
      value: function canSetWireType(type) {
        switch (type) {
          case _Prop2.default.GOTO:
            return true;
          default:
            return false;
        }
      }
    }, {
      key: 'dispose',
      value: function dispose() {
        _text.delete(this);
        _get(TalkNode.prototype.__proto__ || Object.getPrototypeOf(TalkNode.prototype), 'dispose', this).call(this);
      }
    }]);

    return TalkNode;
  }(_CompoundNode3.default);
}();
module.exports = TalkNode;

},{"../core/CompoundNode":6,"../core/Prop":9,"../core/Utils":10}],15:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _BaseNode2 = require('../core/BaseNode');

var _BaseNode3 = _interopRequireDefault(_BaseNode2);

var _Prop = require('../core/Prop');

var _Prop2 = _interopRequireDefault(_Prop);

var _nxCompile = require('@risingstack/nx-compile');

var _nxCompile2 = _interopRequireDefault(_nxCompile);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ScriptNode = function () {
  var _label = new WeakMap();
  var _script = new WeakMap();
  var _compiled = new WeakMap();

  return function (_BaseNode) {
    _inherits(ScriptNode, _BaseNode);

    function ScriptNode(data, rpgs) {
      _classCallCheck(this, ScriptNode);

      var _this = _possibleConstructorReturn(this, (ScriptNode.__proto__ || Object.getPrototypeOf(ScriptNode)).call(this, data, rpgs));

      _label.set(_this, data.label ? data.label : '');
      _script.set(_this, data.script ? data.script : 'return true;');
      _nxCompile2.default.expose('console');
      _compiled.set(_this, _nxCompile2.default.compileCode(_script.get(_this)));
      return _this;
    }

    _createClass(ScriptNode, [{
      key: 'setLabel',
      value: function setLabel(text) {
        _label.set(this, text);
      }
    }, {
      key: 'getLabel',
      value: function getLabel() {
        return _label.get(this);
      }
    }, {
      key: 'setScript',
      value: function setScript(script) {
        _script.set(this, script);
        _compiled.set(this, _nxCompile2.default.compileCode(_script.get(this)));
      }
    }, {
      key: 'getScript',
      value: function getScript() {
        return _script.get(this);
      }
    }, {
      key: 'execute',
      value: function execute() {
        return _compiled.get(this)({ rpgs: this.getRPGS() });
      }
    }, {
      key: 'getData',
      value: function getData() {
        var data = _get(ScriptNode.prototype.__proto__ || Object.getPrototypeOf(ScriptNode.prototype), 'getData', this).call(this);
        data.label = this.getLabel();
        data.script = this.getScript();
        return data;
      }
    }, {
      key: 'setWire',
      value: function setWire(type, linkId) {}
    }, {
      key: 'getWires',
      value: function getWires(type) {}
    }, {
      key: 'removeWire',
      value: function removeWire(type, linkId) {}
    }, {
      key: 'dispose',
      value: function dispose() {
        _label.delete(this);
        _script.delete(this);
        _compiled.delete(this);
        _get(ScriptNode.prototype.__proto__ || Object.getPrototypeOf(ScriptNode.prototype), 'dispose', this).call(this);
      }
    }]);

    return ScriptNode;
  }(_BaseNode3.default);
}();
module.exports = ScriptNode;

},{"../core/BaseNode":5,"../core/Prop":9,"@risingstack/nx-compile":1}],16:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _CompoundNode2 = require('../core/CompoundNode');

var _CompoundNode3 = _interopRequireDefault(_CompoundNode2);

var _QuestStatus = require('./QuestStatus');

var _QuestStatus2 = _interopRequireDefault(_QuestStatus);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var KEY_TASKS = 'tasks';

var QuestNode = function () {
  var _title = new WeakMap();
  var _description = new WeakMap();
  var _status = new WeakMap();

  return function (_CompoundNode) {
    _inherits(QuestNode, _CompoundNode);

    function QuestNode(data, rpgs) {
      _classCallCheck(this, QuestNode);

      var _this = _possibleConstructorReturn(this, (QuestNode.__proto__ || Object.getPrototypeOf(QuestNode)).call(this, data, rpgs));

      _title.set(_this, data.title ? data.title : '');
      _description.set(_this, data.description ? data.description : '');
      _status.set(_this, data.status ? data.status : _QuestStatus2.default.INCOMPLETE);
      return _this;
    }

    _createClass(QuestNode, [{
      key: 'getData',
      value: function getData() {
        var data = _get(QuestNode.prototype.__proto__ || Object.getPrototypeOf(QuestNode.prototype), 'getData', this).call(this);
        data.title = this.getTitle();
        data.description = this.getDescription();
        data.status = this.getStatus();
        return data;
      }
    }, {
      key: 'canAddChild',
      value: function canAddChild(type) {
        return type === 'TaskNode';
      }
    }, {
      key: 'setTitle',
      value: function setTitle(value) {
        _title.set(this, value);
      }
    }, {
      key: 'getTitle',
      value: function getTitle() {
        return _title.get(this);
      }
    }, {
      key: 'setDescription',
      value: function setDescription(value) {
        _description.set(this, value);
      }
    }, {
      key: 'getDescription',
      value: function getDescription() {
        return _description.get(this);
      }
    }, {
      key: 'setStatus',
      value: function setStatus(value) {
        switch (value) {
          case _QuestStatus2.default.COMPLETED:
          case _QuestStatus2.default.FAILED:
            _status.set(this, value);
          case _QuestStatus2.default.INCOMPLETE:
          default:
            _status.set(this, _QuestStatus2.default.INCOMPLETE);
            break;
        };
      }
    }, {
      key: 'getStatus',
      value: function getStatus() {
        return _status.get(this);
      }
    }, {
      key: 'dispose',
      value: function dispose() {
        _title.delete(this);
        _description.delete(this);
        _status.delete(this);
        _get(QuestNode.prototype.__proto__ || Object.getPrototypeOf(QuestNode.prototype), 'dispose', this).call(this);
      }
    }]);

    return QuestNode;
  }(_CompoundNode3.default);
}();
module.exports = QuestNode;

},{"../core/CompoundNode":6,"./QuestStatus":17}],17:[function(require,module,exports){
"use strict";

var INCOMPLETE = 'questIncomplete';
var COMPLETED = 'questCompleted';
var FAILED = 'questFailed';

exports.INCOMPLETE = INCOMPLETE;
exports.COMPLETED = COMPLETED;
exports.FAILED = FAILED;

},{}],18:[function(require,module,exports){
"use strict";

var _BaseNode2 = require("../core/BaseNode");

var _BaseNode3 = _interopRequireDefault(_BaseNode2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TaskNode = function () {
  return function (_BaseNode) {
    _inherits(TaskNode, _BaseNode);

    function TaskNode(data) {
      _classCallCheck(this, TaskNode);

      return _possibleConstructorReturn(this, (TaskNode.__proto__ || Object.getPrototypeOf(TaskNode)).call(this, data));
    }

    //to do


    return TaskNode;
  }(_BaseNode3.default);
}();

module.exports = TaskNode;

},{"../core/BaseNode":5}],19:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _BaseNode2 = require('../core/BaseNode');

var _BaseNode3 = _interopRequireDefault(_BaseNode2);

var _VariableType = require('./VariableType');

var _VariableType2 = _interopRequireDefault(_VariableType);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var VariableNode = function () {
  var _value = new WeakMap();
  var _type = new WeakMap();

  function _parseBoolean(val) {
    var isBool = (typeof val === 'undefined' ? 'undefined' : _typeof(val)) === _VariableType2.default.BOOLEAN;
    if (isBool) {
      return val;
    } else {
      switch (String(val).toLowerCase().trim()) {
        case "true":case "yes":case "1":
          return true;
        case "false":case "no":case "0":case null:
          return false;
        default:
          return Boolean(val);
      }
    }
  }

  function _parseString(val) {
    return (typeof val === 'undefined' ? 'undefined' : _typeof(val)) === _VariableType2.default.STRING ? val : String(val);
  }

  function _parseNumber(val) {
    return (typeof val === 'undefined' ? 'undefined' : _typeof(val)) === _VariableType2.default.NUMBER ? val : parseFloat(val);
  }

  function _parseValue(val, type) {
    switch (type) {
      case _VariableType2.default.BOOLEAN:
        return _parseBoolean(val);
      case _VariableType2.default.NUMBER:
        return _parseNumber(val);
      case _VariableType2.default.STRING:
      default:
        return _parseString(val);
    }
  }

  return function (_BaseNode) {
    _inherits(VariableNode, _BaseNode);

    function VariableNode(data, rpgs) {
      _classCallCheck(this, VariableNode);

      var _this = _possibleConstructorReturn(this, (VariableNode.__proto__ || Object.getPrototypeOf(VariableNode)).call(this, data, rpgs));

      _type.set(_this, data.hasOwnProperty('type') ? data.type : _VariableType2.default.STRING);
      _value.set(_this, data.hasOwnProperty('value') ? _parseValue(data.value, _type.get(_this)) : '');
      return _this;
    }

    _createClass(VariableNode, [{
      key: 'getData',
      value: function getData() {
        var data = _get(VariableNode.prototype.__proto__ || Object.getPrototypeOf(VariableNode.prototype), 'getData', this).call(this);
        data.type = this.getType();
        data.value = this.getValue();
        return data;
      }
    }, {
      key: 'setValue',
      value: function setValue(val) {
        _value.set(this, _parseValue(val, _type.get(this)));
      }
    }, {
      key: 'getValue',
      value: function getValue() {
        return _value.get(this);
      }
    }, {
      key: 'getType',
      value: function getType() {
        return _type.get(this);
      }
    }, {
      key: 'canSetWireType',
      value: function canSetWireType(type) {
        return false;
      }
    }, {
      key: 'dispose',
      value: function dispose() {
        _value.delete(this);
        _type.delete(this);
        _get(VariableNode.prototype.__proto__ || Object.getPrototypeOf(VariableNode.prototype), 'dispose', this).call(this);
      }
    }]);

    return VariableNode;
  }(_BaseNode3.default);
}();

module.exports = VariableNode;

},{"../core/BaseNode":5,"./VariableType":20}],20:[function(require,module,exports){
'use strict';

var BOOLEAN = 'boolean';
var STRING = 'string';
var NUMBER = 'number';

exports.BOOLEAN = BOOLEAN;
exports.STRING = STRING;
exports.NUMBER = NUMBER;

},{}],21:[function(require,module,exports){
"use strict";

var _data = require('../data/data.json');

var _data2 = _interopRequireDefault(_data);

var _RPGSystem = require('./rpgs/RPGSystem');

var _RPGSystem2 = _interopRequireDefault(_RPGSystem);

var _DialogWalker = require('./rpgs/dialogs/DialogWalker');

var _DialogWalker2 = _interopRequireDefault(_DialogWalker);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(function ($, window, document, undefined) {
    $(function () {
        var rpgs1 = new _RPGSystem2.default();
        rpgs1.addActor('act1', { name: 'Adam' }).setWire('dialog', 'dlg1').addCondition('cond1', { script: 'return rpgs.getVar(\'b1\');' }).addDialog('dlg1', { startTalk: 'tlk0' }).addTalk('tlk0', { text: 'This is talk 0.' }).addAnswer('tlk0ans1', { text: 'Answer1' }).setWire('visibility', 'cond1').setWire('goto', 'tlk1').addAnswer('tlk0ans2', { text: 'Answer2' }).setWire('goto', 'tlk2').addAnswer('tlk0ans3', { text: 'Answer3' }).setWire('goto', 'tlk3').addTalk('tlk1', { text: 'This is talk 1.' }).addAnswer('tlk1ans1', { text: 'Answer1' }).addTalk('tlk2', { text: 'This is talk 2.' }).addAnswer('tlk2ans1', { text: 'Answer1' }).addTalk('tlk3', { text: 'This is talk 3.' }).addAnswer('tlk3ans1', { text: 'Answer1' }).addVariable('b1', { type: 'boolean', value: false }).addVariable('s1', { type: 'string', value: 'This is message from compiled code!' }).addVariable('n1', { type: 'number', value: 56 });

        var cond = rpgs1.findNode('cond1');
        var b1 = rpgs1.findNode('b1');
        var s1 = rpgs1.findNode('s1');
        var n1 = rpgs1.findNode('n1');

        var rpgs1Serialized = rpgs1.serializeData();
        console.log("rpgs1", rpgs1Serialized);

        var rpgs2 = new _RPGSystem2.default(JSON.parse(rpgs1Serialized));

        var rpgs2Serialized = rpgs2.serializeData();
        console.log("rpgs2", rpgs2Serialized);

        console.log("data created is equal to data parsed:", rpgs1Serialized === rpgs2Serialized);

        var walker = new _DialogWalker2.default(rpgs2);
        walker.setDialog('dlg1');
        console.log('conversation1:', walker.getConversation());
        walker.selectOption('tlk0ans1');
        console.log('conversation2:', walker.getConversation());
    });
})(jQuery, window, document);

},{"../data/data.json":2,"./rpgs/RPGSystem":3,"./rpgs/dialogs/DialogWalker":13}]},{},[21])


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJub2RlX21vZHVsZXMvQHJpc2luZ3N0YWNrL254LWNvbXBpbGUvY29tcGlsZXIuanMiLCJzcmMvZGF0YS9kYXRhLmpzb24iLCJzcmMvanMvcnBncy9SUEdTeXN0ZW0uanMiLCJzcmMvanMvcnBncy9hY3RvcnMvQWN0b3JOb2RlLmpzIiwic3JjL2pzL3JwZ3MvY29yZS9CYXNlTm9kZS5qcyIsInNyYy9qcy9ycGdzL2NvcmUvQ29tcG91bmROb2RlLmpzIiwic3JjL2pzL3JwZ3MvY29yZS9FcnJvckNvZGUuanMiLCJzcmMvanMvcnBncy9jb3JlL0Vycm9ySGFuZGxlci5qcyIsInNyYy9qcy9ycGdzL2NvcmUvUHJvcC5qcyIsInNyYy9qcy9ycGdzL2NvcmUvVXRpbHMuanMiLCJzcmMvanMvcnBncy9kaWFsb2dzL0Fuc3dlck5vZGUuanMiLCJzcmMvanMvcnBncy9kaWFsb2dzL0RpYWxvZ05vZGUuanMiLCJzcmMvanMvcnBncy9kaWFsb2dzL0RpYWxvZ1dhbGtlci5qcyIsInNyYy9qcy9ycGdzL2RpYWxvZ3MvVGFsa05vZGUuanMiLCJzcmMvanMvcnBncy9sb2dpYy9TY3JpcHROb2RlLmpzIiwic3JjL2pzL3JwZ3MvcXVlc3RzL1F1ZXN0Tm9kZS5qcyIsInNyYy9qcy9ycGdzL3F1ZXN0cy9RdWVzdFN0YXR1cy5qcyIsInNyYy9qcy9ycGdzL3F1ZXN0cy9UYXNrTm9kZS5qcyIsInNyYy9qcy9ycGdzL3ZhcmlhYmxlcy9WYXJpYWJsZU5vZGUuanMiLCJzcmMvanMvcnBncy92YXJpYWJsZXMvVmFyaWFibGVUeXBlLmpzIiwic3JjL2pzL3NjcmlwdHMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtB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QUksT0FBTyxNQUFNLFFBQU4sQ0FBZSxPQUFmLENBQVg7QUFDQSxZQUFJLEtBQUssTUFBTSxRQUFOLENBQWUsSUFBZixDQUFUO0FBQ0EsWUFBSSxLQUFLLE1BQU0sUUFBTixDQUFlLElBQWYsQ0FBVDtBQUNBLFlBQUksS0FBSyxNQUFNLFFBQU4sQ0FBZSxJQUFmLENBQVQ7O0FBRUEsWUFBSSxrQkFBa0IsTUFBTSxhQUFOLEVBQXRCO0FBQ0EsZ0JBQVEsR0FBUixDQUFZLE9BQVosRUFBb0IsZUFBcEI7O0FBRUEsWUFBSSxRQUFRLHdCQUFjLEtBQUssS0FBTCxDQUFXLGVBQVgsQ0FBZCxDQUFaOztBQUVBLFlBQUksa0JBQWtCLE1BQU0sYUFBTixFQUF0QjtBQUNBLGdCQUFRLEdBQVIsQ0FBWSxPQUFaLEVBQW9CLGVBQXBCOztBQUVBLGdCQUFRLEdBQVIsQ0FBWSx1Q0FBWixFQUFvRCxvQkFBb0IsZUFBeEU7O0FBRUEsWUFBSSxTQUFTLDJCQUFpQixLQUFqQixDQUFiO0FBQ0EsZUFBTyxTQUFQLENBQWlCLE1BQWpCO0FBQ0EsZ0JBQVEsR0FBUixDQUFZLGdCQUFaLEVBQTZCLE9BQU8sZUFBUCxFQUE3QjtBQUNBLGVBQU8sWUFBUCxDQUFvQixVQUFwQjtBQUNBLGdCQUFRLEdBQVIsQ0FBWSxnQkFBWixFQUE2QixPQUFPLGVBQVAsRUFBN0I7QUFDRCxLQTVDRDtBQThDRCxDQS9DRCxFQStDRyxNQS9DSCxFQStDVyxNQS9DWCxFQStDbUIsUUEvQ25CIiwiZmlsZSI6InNjcmlwdHMubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGNvbXBpbGVDb2RlLFxuICBjb21waWxlRXhwcmVzc2lvbixcbiAgZXhwb3NlLFxuICBoaWRlXG59XG5cbmxldCBnbG9iYWxPYmpcbmlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykgZ2xvYmFsT2JqID0gd2luZG93IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbmVsc2UgaWYgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSBnbG9iYWxPYmogPSBnbG9iYWwgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuZWxzZSBpZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnKSBnbG9iYWxPYmogPSBzZWxmIC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbmdsb2JhbE9iai4kbnhDb21waWxlVG9TYW5kYm94ID0gdG9TYW5kYm94XG5nbG9iYWxPYmouJG54Q29tcGlsZUNyZWF0ZUJhY2t1cCA9IGNyZWF0ZUJhY2t1cFxuXG5jb25zdCBwcm94aWVzID0gbmV3IFdlYWtNYXAoKVxuY29uc3QgZXhwcmVzc2lvbkNhY2hlID0gbmV3IE1hcCgpXG5jb25zdCBjb2RlQ2FjaGUgPSBuZXcgTWFwKClcbmNvbnN0IGdsb2JhbHMgPSBuZXcgU2V0KClcbmNvbnN0IGhhbmRsZXJzID0ge2hhc31cblxuZnVuY3Rpb24gY29tcGlsZUV4cHJlc3Npb24gKHNyYykge1xuICBpZiAodHlwZW9mIHNyYyAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdmaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nJylcbiAgfVxuICBsZXQgZXhwcmVzc2lvbiA9IGV4cHJlc3Npb25DYWNoZS5nZXQoc3JjKVxuICBpZiAoIWV4cHJlc3Npb24pIHtcbiAgICBleHByZXNzaW9uID0gbmV3IEZ1bmN0aW9uKCdjb250ZXh0JywgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgICAgYGNvbnN0IHNhbmRib3ggPSAkbnhDb21waWxlVG9TYW5kYm94KGNvbnRleHQpXG4gICAgICB0cnkgeyB3aXRoIChzYW5kYm94KSB7IHJldHVybiAke3NyY30gfSB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgaWYgKCEoZXJyIGluc3RhbmNlb2YgVHlwZUVycm9yKSkgdGhyb3cgZXJyXG4gICAgICB9YClcbiAgICBleHByZXNzaW9uQ2FjaGUuc2V0KHNyYywgZXhwcmVzc2lvbilcbiAgfVxuICByZXR1cm4gZXhwcmVzc2lvblxufVxuXG5mdW5jdGlvbiBjb21waWxlQ29kZSAoc3JjKSB7XG4gIGlmICh0eXBlb2Ygc3JjICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmcnKVxuICB9XG4gIGxldCBjb2RlID0gY29kZUNhY2hlLmdldChzcmMpXG4gIGlmICghY29kZSkge1xuICAgIGNvZGUgPSBuZXcgRnVuY3Rpb24oJ2NvbnRleHQnLCAndGVtcFZhcnMnLCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgYGNvbnN0IGJhY2t1cCA9ICRueENvbXBpbGVDcmVhdGVCYWNrdXAoY29udGV4dCwgdGVtcFZhcnMpXG4gICAgT2JqZWN0LmFzc2lnbihjb250ZXh0LCB0ZW1wVmFycylcbiAgICBjb25zdCBzYW5kYm94ID0gJG54Q29tcGlsZVRvU2FuZGJveChjb250ZXh0KVxuICAgIHRyeSB7XG4gICAgICB3aXRoIChzYW5kYm94KSB7ICR7c3JjfSB9XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIE9iamVjdC5hc3NpZ24oY29udGV4dCwgYmFja3VwKVxuICAgIH1gKVxuICAgIGNvZGVDYWNoZS5zZXQoc3JjLCBjb2RlKVxuICB9XG4gIHJldHVybiBjb2RlXG59XG5cbmZ1bmN0aW9uIGV4cG9zZSAoLi4uZ2xvYmFsTmFtZXMpIHtcbiAgZm9yIChsZXQgZ2xvYmFsTmFtZSBvZiBnbG9iYWxOYW1lcykge1xuICAgIGdsb2JhbHMuYWRkKGdsb2JhbE5hbWUpXG4gIH1cbn1cblxuZnVuY3Rpb24gaGlkZSAoLi4uZ2xvYmFsTmFtZXMpIHtcbiAgZm9yIChsZXQgZ2xvYmFsTmFtZSBvZiBnbG9iYWxOYW1lcykge1xuICAgIGdsb2JhbHMuZGVsZXRlKGdsb2JhbE5hbWUpXG4gIH1cbn1cblxuZnVuY3Rpb24gdG9TYW5kYm94IChvYmopIHtcbiAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhbiBvYmplY3QnKVxuICB9XG4gIGxldCBzYW5kYm94ID0gcHJveGllcy5nZXQob2JqKVxuICBpZiAoIXNhbmRib3gpIHtcbiAgICBzYW5kYm94ID0gbmV3IFByb3h5KG9iaiwgaGFuZGxlcnMpXG4gICAgcHJveGllcy5zZXQob2JqLCBzYW5kYm94KVxuICB9XG4gIHJldHVybiBzYW5kYm94XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUJhY2t1cCAoY29udGV4dCwgdGVtcFZhcnMpIHtcbiAgaWYgKHR5cGVvZiB0ZW1wVmFycyA9PT0gJ29iamVjdCcpIHtcbiAgICBjb25zdCBiYWNrdXAgPSB7fVxuICAgIGZvciAobGV0IGtleSBvZiBPYmplY3Qua2V5cyh0ZW1wVmFycykpIHtcbiAgICAgIGJhY2t1cFtrZXldID0gY29udGV4dFtrZXldXG4gICAgfVxuICAgIHJldHVybiBiYWNrdXBcbiAgfVxufVxuXG5mdW5jdGlvbiBoYXMgKHRhcmdldCwga2V5KSB7XG4gIHJldHVybiBnbG9iYWxzLmhhcyhrZXkpID8gUmVmbGVjdC5oYXModGFyZ2V0LCBrZXkpIDogdHJ1ZVxufVxuIiwibW9kdWxlLmV4cG9ydHM9e1wiYWN0b3JzXCI6W3tcImNsYXNzXCI6XCJBY3Rvck5vZGVcIixcInV1aWRcIjpcImFjdDFcIixcImlucHV0XCI6e1wiZGlhbG9nXCI6W1wiMmQ5MWU2NzUtOWMyZC00OGQ5LTg3ZDAtYjAyNjBiNDAzMDU5XCJdfSxcIm5hbWVcIjpcIkFkYW1cIn1dLFwibG9naWNcIjpbe1wiY2xhc3NcIjpcIlNjcmlwdE5vZGVcIixcInV1aWRcIjpcImNvbmQxXCIsXCJvdXRwdXRcIjp7XCJ2aXNpYmlsaXR5XCI6W1wiYzk0YjRmMWQtMjExNC00M2JhLWI5YjEtZjQ1ZmIwMjZlMDdmXCJdfSxcImxhYmVsXCI6XCJcIixcInNjcmlwdFwiOlwicmV0dXJuIDI+MSAmJiBycGdzLmdldFZhcignYjEnKSA9PT0gZmFsc2U7XCJ9XSxcImRpYWxvZ3NcIjpbe1wiY2xhc3NcIjpcIkRpYWxvZ05vZGVcIixcInV1aWRcIjpcImRsZzFcIixcImlucHV0XCI6e30sXCJvdXRwdXRcIjp7XCJkaWFsb2dcIjpbXCIyZDkxZTY3NS05YzJkLTQ4ZDktODdkMC1iMDI2MGI0MDMwNTlcIl19LFwiY2hpbGRyZW5cIjpbXCJ0bGswXCIsXCJ0bGsxXCIsXCJ0bGsyXCIsXCJ0bGszXCJdLFwic3RhcnRUYWxrXCI6XCJ0bGswXCJ9XSxcImxpbmtzXCI6W3tcImNsYXNzXCI6XCJMaW5rTm9kZVwiLFwidXVpZFwiOlwiMmQ5MWU2NzUtOWMyZC00OGQ5LTg3ZDAtYjAyNjBiNDAzMDU5XCIsXCJpbnB1dFwiOlwiYWN0MVwiLFwib3V0cHV0XCI6XCJkbGcxXCIsXCJ0eXBlXCI6XCJkaWFsb2dcIn0se1wiY2xhc3NcIjpcIkxpbmtOb2RlXCIsXCJ1dWlkXCI6XCJjOTRiNGYxZC0yMTE0LTQzYmEtYjliMS1mNDVmYjAyNmUwN2ZcIixcImlucHV0XCI6XCJ0bGswYW5zMVwiLFwib3V0cHV0XCI6XCJjb25kMVwiLFwidHlwZVwiOlwidmlzaWJpbGl0eVwifSx7XCJjbGFzc1wiOlwiTGlua05vZGVcIixcInV1aWRcIjpcIjMxODQ2NzNmLTA2ZTYtNDFkYy1hYzcyLTg5YjJlNThlMzgwM1wiLFwiaW5wdXRcIjpcInRsazFcIixcIm91dHB1dFwiOlwidGxrMGFuczFcIixcInR5cGVcIjpcImdvdG9cIn0se1wiY2xhc3NcIjpcIkxpbmtOb2RlXCIsXCJ1dWlkXCI6XCIwZmIxZDY2YS1iM2U3LTQ5YWYtYjgwMi0xMjUyOTExNTk2NWJcIixcImlucHV0XCI6XCJ0bGsyXCIsXCJvdXRwdXRcIjpcInRsazBhbnMyXCIsXCJ0eXBlXCI6XCJnb3RvXCJ9LHtcImNsYXNzXCI6XCJMaW5rTm9kZVwiLFwidXVpZFwiOlwiOTJmOWZiNzktZjIxYS00YmY4LWJmYTQtN2IxYmJmYzY0YjdjXCIsXCJpbnB1dFwiOlwidGxrM1wiLFwib3V0cHV0XCI6XCJ0bGswYW5zM1wiLFwidHlwZVwiOlwiZ290b1wifV0sXCJ0YWxrc1wiOlt7XCJjbGFzc1wiOlwiVGFsa05vZGVcIixcInV1aWRcIjpcInRsazBcIixcImlucHV0XCI6e30sXCJjaGlsZHJlblwiOltcInRsazBhbnMxXCIsXCJ0bGswYW5zMlwiLFwidGxrMGFuczNcIl0sXCJ0ZXh0XCI6XCJUaGlzIGlzIHRhbGsgMC5cIn0se1wiY2xhc3NcIjpcIlRhbGtOb2RlXCIsXCJ1dWlkXCI6XCJ0bGsxXCIsXCJpbnB1dFwiOntcImdvdG9cIjpbXCIzMTg0NjczZi0wNmU2LTQxZGMtYWM3Mi04OWIyZTU4ZTM4MDNcIl19LFwiY2hpbGRyZW5cIjpbXCJ0bGsxYW5zMVwiXSxcInRleHRcIjpcIlRoaXMgaXMgdGFsayAxLlwifSx7XCJjbGFzc1wiOlwiVGFsa05vZGVcIixcInV1aWRcIjpcInRsazJcIixcImlucHV0XCI6e1wiZ290b1wiOltcIjBmYjFkNjZhLWIzZTctNDlhZi1iODAyLTEyNTI5MTE1OTY1YlwiXX0sXCJjaGlsZHJlblwiOltcInRsazJhbnMxXCJdLFwidGV4dFwiOlwiVGhpcyBpcyB0YWxrIDIuXCJ9LHtcImNsYXNzXCI6XCJUYWxrTm9kZVwiLFwidXVpZFwiOlwidGxrM1wiLFwiaW5wdXRcIjp7XCJnb3RvXCI6W1wiOTJmOWZiNzktZjIxYS00YmY4LWJmYTQtN2IxYmJmYzY0YjdjXCJdfSxcImNoaWxkcmVuXCI6W1widGxrM2FuczFcIl0sXCJ0ZXh0XCI6XCJUaGlzIGlzIHRhbGsgMy5cIn1dLFwiYW5zd2Vyc1wiOlt7XCJjbGFzc1wiOlwiQW5zd2VyTm9kZVwiLFwidXVpZFwiOlwidGxrMGFuczFcIixcImlucHV0XCI6e1widmlzaWJpbGl0eVwiOltcImM5NGI0ZjFkLTIxMTQtNDNiYS1iOWIxLWY0NWZiMDI2ZTA3ZlwiXX0sXCJvdXRwdXRcIjp7XCJnb3RvXCI6W1wiMzE4NDY3M2YtMDZlNi00MWRjLWFjNzItODliMmU1OGUzODAzXCJdfSxcInRleHRcIjpcIkFuc3dlcjFcIn0se1wiY2xhc3NcIjpcIkFuc3dlck5vZGVcIixcInV1aWRcIjpcInRsazBhbnMyXCIsXCJpbnB1dFwiOnt9LFwib3V0cHV0XCI6e1wiZ290b1wiOltcIjBmYjFkNjZhLWIzZTctNDlhZi1iODAyLTEyNTI5MTE1OTY1YlwiXX0sXCJ0ZXh0XCI6XCJBbnN3ZXIyXCJ9LHtcImNsYXNzXCI6XCJBbnN3ZXJOb2RlXCIsXCJ1dWlkXCI6XCJ0bGswYW5zM1wiLFwiaW5wdXRcIjp7fSxcIm91dHB1dFwiOntcImdvdG9cIjpbXCI5MmY5ZmI3OS1mMjFhLTRiZjgtYmZhNC03YjFiYmZjNjRiN2NcIl19LFwidGV4dFwiOlwiQW5zd2VyM1wifSx7XCJjbGFzc1wiOlwiQW5zd2VyTm9kZVwiLFwidXVpZFwiOlwidGxrMWFuczFcIixcImlucHV0XCI6e30sXCJvdXRwdXRcIjp7fSxcInRleHRcIjpcIkFuc3dlcjFcIn0se1wiY2xhc3NcIjpcIkFuc3dlck5vZGVcIixcInV1aWRcIjpcInRsazJhbnMxXCIsXCJpbnB1dFwiOnt9LFwib3V0cHV0XCI6e30sXCJ0ZXh0XCI6XCJBbnN3ZXIxXCJ9LHtcImNsYXNzXCI6XCJBbnN3ZXJOb2RlXCIsXCJ1dWlkXCI6XCJ0bGszYW5zMVwiLFwiaW5wdXRcIjp7fSxcIm91dHB1dFwiOnt9LFwidGV4dFwiOlwiQW5zd2VyMVwifV0sXCJ2YXJpYWJsZXNcIjpbe1wiY2xhc3NcIjpcIlZhcmlhYmxlTm9kZVwiLFwidXVpZFwiOlwiYjFcIixcImlucHV0XCI6e30sXCJvdXRwdXRcIjp7fSxcInR5cGVcIjpcImJvb2xlYW5cIixcInZhbHVlXCI6ZmFsc2V9LHtcImNsYXNzXCI6XCJWYXJpYWJsZU5vZGVcIixcInV1aWRcIjpcInMxXCIsXCJpbnB1dFwiOnt9LFwib3V0cHV0XCI6e30sXCJ0eXBlXCI6XCJzdHJpbmdcIixcInZhbHVlXCI6XCJUaGlzIGlzIG1lc3NhZ2UgZnJvbSBjb21waWxlZCBjb2RlIVwifSx7XCJjbGFzc1wiOlwiVmFyaWFibGVOb2RlXCIsXCJ1dWlkXCI6XCJuMVwiLFwiaW5wdXRcIjp7fSxcIm91dHB1dFwiOnt9LFwidHlwZVwiOlwibnVtYmVyXCIsXCJ2YWx1ZVwiOjU2fV19XG4iLCJcInVzZSBzdHJpY3RcIjtcclxuaW1wb3J0IFV0aWxzICAgICAgICAgICAgZnJvbSAnLi9jb3JlL1V0aWxzJztcclxuaW1wb3J0IEVycm9ySGFuZGxlciAgICAgZnJvbSAnLi9jb3JlL0Vycm9ySGFuZGxlcidcclxuaW1wb3J0IEVycm9yQ29kZSAgICAgICAgZnJvbSAnLi9jb3JlL0Vycm9yQ29kZSc7XHJcbmltcG9ydCBCYXNlTm9kZSAgICAgICAgIGZyb20gJy4vY29yZS9CYXNlTm9kZSc7XHJcbmltcG9ydCBBY3Rvck5vZGUgICAgICAgIGZyb20gJy4vYWN0b3JzL0FjdG9yTm9kZSc7XHJcbi8vaW1wb3J0IEludmVudG9yeU5vZGUgIGZyb20gJy4vYWN0b3JzL0ludmVudG9yeU5vZGUnO1xyXG5pbXBvcnQgU2NyaXB0Tm9kZSAgICAgICBmcm9tICcuL2xvZ2ljL1NjcmlwdE5vZGUnO1xyXG5pbXBvcnQgQW5zd2VyTm9kZSAgICAgICBmcm9tICcuL2RpYWxvZ3MvQW5zd2VyTm9kZSc7XHJcbmltcG9ydCBEaWFsb2dOb2RlICAgICAgIGZyb20gJy4vZGlhbG9ncy9EaWFsb2dOb2RlJztcclxuaW1wb3J0IFRhbGtOb2RlICAgICAgICAgZnJvbSAnLi9kaWFsb2dzL1RhbGtOb2RlJztcclxuaW1wb3J0IFF1ZXN0Tm9kZSAgICAgICAgZnJvbSAnLi9xdWVzdHMvUXVlc3ROb2RlJztcclxuaW1wb3J0IFRhc2tOb2RlICAgICAgICAgZnJvbSAnLi9xdWVzdHMvVGFza05vZGUnO1xyXG5pbXBvcnQgVmFyaWFibGVOb2RlICAgICBmcm9tICcuL3ZhcmlhYmxlcy9WYXJpYWJsZU5vZGUnO1xyXG5cclxuY29uc3QgS0VZX0FDVE9SUyA9ICdhY3RvcnMnO1xyXG5jb25zdCBLRVlfQU5TV0VSUyA9ICdhbnN3ZXJzJztcclxuY29uc3QgS0VZX0xPR0lDID0gJ2xvZ2ljJztcclxuY29uc3QgS0VZX0RJQUxPR1MgPSAnZGlhbG9ncyc7XHJcbmNvbnN0IEtFWV9TQ1JJUFRTID0gJ3NjcmlwdHMnO1xyXG5jb25zdCBLRVlfVEFMS1MgPSAndGFsa3MnO1xyXG5jb25zdCBLRVlfVEFTS1MgPSAndGFza3MnO1xyXG5jb25zdCBLRVlfUVVFU1RTID0gJ3F1ZXN0cyc7XHJcbmNvbnN0IEtFWV9WQVJJQUJMRVMgPSAndmFyaWFibGVzJztcclxuXHJcbmxldCBSUEdTeXN0ZW0gPSBmdW5jdGlvbiAoZGF0YSxlZGl0b3IpIHtcclxuICBsZXQgX29iamVjdFBvb2wgPSBbXSxcclxuICBfZWRpdG9yID0gZWRpdG9yfHxudWxsLFxyXG4gIF9lcnJvckhhbmRsZXIgPSBuZXcgRXJyb3JIYW5kbGVyKF9lZGl0b3IpLFxyXG4gIF9jb250ZXh0ID0gbnVsbCxcclxuICBfbGFzdENoaWxkID0gbnVsbCxcclxuICBfcGFyZW50SGlzdG9yeSA9IFtdLFxyXG4gIF90ZW1wV2lyZXMgPSBbXTtcclxuXHJcbiAgZnVuY3Rpb24gX25vZGVGYWN0b3J5KGRhdGEscnBncykge1xyXG4gICAgbGV0IGNsYXNzTmFtZSA9IGRhdGEuY2xhc3M7XHJcbiAgICBzd2l0Y2ggKGNsYXNzTmFtZSkge1xyXG4gICAgICBjYXNlICdBY3Rvck5vZGUnOiAgICAgcmV0dXJuIG5ldyBBY3Rvck5vZGUoZGF0YSxycGdzKTtcclxuICAgICAgY2FzZSAnU2NyaXB0Tm9kZSc6ICAgIHJldHVybiBuZXcgU2NyaXB0Tm9kZShkYXRhLHJwZ3MpO1xyXG4gICAgICBjYXNlICdBbnN3ZXJOb2RlJzogICAgcmV0dXJuIG5ldyBBbnN3ZXJOb2RlKGRhdGEscnBncyk7XHJcbiAgICAgIGNhc2UgJ0RpYWxvZ05vZGUnOiAgICByZXR1cm4gbmV3IERpYWxvZ05vZGUoZGF0YSxycGdzKTtcclxuICAgICAgY2FzZSAnVGFsa05vZGUnOiAgICAgIHJldHVybiBuZXcgVGFsa05vZGUoZGF0YSxycGdzKTtcclxuICAgICAgY2FzZSAnUXVlc3ROb2RlJzogICAgIHJldHVybiBuZXcgUXVlc3ROb2RlKGRhdGEscnBncyk7XHJcbiAgICAgIGNhc2UgJ1Rhc2tOb2RlJzogICAgICByZXR1cm4gbmV3IFRhc2tOb2RlKGRhdGEscnBncyk7XHJcbiAgICAgIGNhc2UgJ1ZhcmlhYmxlTm9kZSc6ICByZXR1cm4gbmV3IFZhcmlhYmxlTm9kZShkYXRhLHJwZ3MpO1xyXG4gICAgICBkZWZhdWx0OlxyXG4gICAgICAgIF9lcnJvckhhbmRsZXIuc2hvd01zZyhFcnJvckNvZGUuQ0xBU1NfTk9UX0RFRklORUQse2NsYXNzOmNsYXNzTmFtZX0pO1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbGV0IF9maW5kTm9kZSA9IGZ1bmN0aW9uKG5vZGVJZCkge1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBfb2JqZWN0UG9vbC5sZW5ndGg7IGkrKykge1xyXG4gICAgICBpZihfb2JqZWN0UG9vbFtpXS5nZXRJZCgpID09PSBub2RlSWQpIHJldHVybiBfb2JqZWN0UG9vbFtpXTtcclxuICAgIH1cclxuICAgIHJldHVybiBudWxsO1xyXG4gIH0sXHJcblxyXG4gIF9yZW1vdmVOb2RlID0gZnVuY3Rpb24oaWQpIHtcclxuICAgIGxldCBpbmRleCA9IFV0aWxzLmdldEluZGV4QnlJZChfb2JqZWN0UG9vbCxpZCk7XHJcbiAgICBsZXQgaXNOb2RlRm91bmQgPSBpbmRleCA+IC0xO1xyXG4gICAgaWYoaXNOb2RlRm91bmQpIHtcclxuICAgICAgbGV0IG5vZGUgPSBfb2JqZWN0UG9vbC5zcGxpY2UoaW5kZXgsMSlbMF07XHJcbiAgICAgIG5vZGUuZGlzcG9zZSgpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGlzTm9kZUZvdW5kO1xyXG4gIH0sXHJcblxyXG4gIF9zZXRDb25uZWN0aW9uID0gZnVuY3Rpb24odHlwZSxub2RlSWQxLG5vZGVJZDIpIHtcclxuICAgIGlmKG5vZGVJZDEgPT09IG5vZGVJZDIpIHtcclxuICAgICAgX2Vycm9ySGFuZGxlci5zaG93TXNnKEVycm9yQ29kZS5DT05ORUNUSU9OX1RPX0lUU0VMRix7bm9kZTpub2RlSWQxfSk7XHJcbiAgICB9XHJcbiAgICBsZXQgbm9kZTEgPSBfZmluZE5vZGUobm9kZUlkMSk7XHJcbiAgICBsZXQgbm9kZTIgPSBfZmluZE5vZGUobm9kZUlkMik7XHJcbiAgICBpZihub2RlMiA9PT0gbnVsbCkge1xyXG4gICAgICBfdGVtcFdpcmVzLnB1c2goe3R5cGU6dHlwZSx0YXJnZXROb2RlOm5vZGVJZDEscmVmZXJlbmNlTm9kZTpub2RlSWQyfSk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmKG5vZGUxLmNhblNldFdpcmVUeXBlKHR5cGUpKSB7XHJcbiAgICAgIG5vZGUxLnNldFdpcmUodHlwZSxub2RlMi5nZXRJZCgpKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIF9lcnJvckhhbmRsZXIuc2hvd01zZyhFcnJvckNvZGUuSU1QUk9QRVJfQ09OTkVDVElPTix7XHJcbiAgICAgICAgdHlwZTp0eXBlLFxyXG4gICAgICAgIG5vZGUxOm5vZGVJZDEsXHJcbiAgICAgICAgbm9kZTI6bm9kZUlkMlxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgLy9NRVRIT0QgQ0hBSU5JTkdcclxuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcblxyXG4gIC8qKlxyXG4gICAqIE1ldGhvZCB1c2VkIHRvIGNoZWNrIHBhc3NlZCBwYXJhbWV0ZXJzIGFuZCBsYXRlciBtZXJnZSB0aGVtIGludG9cclxuICAgKiBzaW5nbGUgb2JqZWN0LlxyXG4gICAqIEBwYXJhbSAge3N0cmluZ30gaWQgICAgICBNYW5kYXRvcnkgaWQgb2Ygbm9kZS5cclxuICAgKiBAcGFyYW0gIHtvYmplY3R9IHBhcmFtcyAgT3B0aW9uYWwgcGFyYW1ldGVycy5cclxuICAgKiBAcmV0dXJuIHtvYmplY3R9IFBhcmFtZXRlcnMgbWVyZ2VkIGludG8gb2JqZWN0LlxyXG4gICAqL1xyXG4gIGZ1bmN0aW9uIF9jaGVja0FuZE1lcmdlUGFyYW1zKFxyXG4gICAgICAgICAgICAgICAgaWQgPSBfZXJyb3JIYW5kbGVyLnNob3dNc2coRXJyb3JDb2RlLk1BTkRBVE9SWV9QQVJBTSx7cGFyYW06J2lkJ30pLFxyXG4gICAgICAgICAgICAgICAgcGFyYW1zKSB7XHJcbiAgICAgIGlmKHR5cGVvZiBpZCAhPT0gJ3N0cmluZycpIHtcclxuICAgICAgICBfZXJyb3JIYW5kbGVyLnNob3dNc2coRXJyb3JDb2RlLklOQ09SUkVDVF9UWVBFLHt0eXBlOidzdHJpbmcnfSk7XHJcbiAgICAgIH1cclxuICAgICAgaWYocGFyYW1zICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIHBhcmFtcyAhPT0gJ29iamVjdCcpIHtcclxuICAgICAgICBfZXJyb3JIYW5kbGVyLnNob3dNc2coRXJyb3JDb2RlLklOQ09SUkVDVF9UWVBFLHt0eXBlOidvYmplY3QnfSk7XHJcbiAgICAgIH0gZWxzZSBpZihwYXJhbXMgPT09IHVuZGVmaW5lZCl7XHJcbiAgICAgICAgcGFyYW1zID0ge307XHJcbiAgICAgIH1cclxuICAgICAgcGFyYW1zLnV1aWQgPSBpZDtcclxuICAgICAgcmV0dXJuIHBhcmFtcztcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIF9jaGFpbk5vZGVDcmVhdG9yKGlkLHBhcmFtcyxhc0NoaWxkLGNsYXNzTmFtZSkge1xyXG4gICAgLy9GaXJzdCwgd2UgY2hlY2sgdGhhdCBpZCBhbmQgcGFyYW1zIGFyZSB2YWxpZC5cclxuICAgIHBhcmFtcyA9IF9jaGVja0FuZE1lcmdlUGFyYW1zKGlkLHBhcmFtcyk7XHJcbiAgICAvL0NsYXNzIG5hbWUgZm9yIGxhdGVyIHVzYWdlLlxyXG4gICAgcGFyYW1zLmNsYXNzID0gY2xhc3NOYW1lO1xyXG4gICAgX25vZGVDcmVhdG9yKHBhcmFtcyxhc0NoaWxkKTtcclxuICAgIHJldHVybiBfc2VsZjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoaXMgbWV0aG9kIGhlbHBzIGluIHRoZSBjcmVhdGlvbiBvZiBub2Rlcy4gSXRzIGZvY3VzIG9uIHByb3BlclxyXG4gICAqIHBsYWNlbWVudCBvZiBub2RlcyBpbiB0cmVlLlxyXG4gICAqIEBwYXJhbSAge29iamVjdH0gcGFyYW1zICBQYXJhbWV0ZXJzIG9mIGNyZWF0ZWQgbm9kZS5cclxuICAgKiBAcGFyYW0gIHtib29sZWFufSBhc0NoaWxkIERldGVybWluZXMgaWYgbm9kZSBzaG91bGQgYmUgYWRkZWQgYXMgY2hpbGRcclxuICAgKiBvZiBhbm90aGVyIG5vZGUgb3IgYXMgYW4gaW5kZXBlbmRlbnQgbm9kZS5cclxuICAgKi9cclxuICBmdW5jdGlvbiBfbm9kZUNyZWF0b3IocGFyYW1zLGFzQ2hpbGQpIHtcclxuICAgIC8vVGVzdCBpZiBub2RlIHNob3VsZCBiZSBhZGRlZCBhcyBjaGlsZCBvciBwYXJlbnQuXHJcbiAgICBpZihhc0NoaWxkKSB7XHJcbiAgICAgIC8vSWYgbGFzdCBhZGRlZCBjaGlsZCB3YXMgbm90IG51bGwgdGhlbiB3ZSBtdXN0IGNoZWNrIGFkZGl0aW9uYWwgY29uZGl0aW9ucy5cclxuICAgICAgaWYoX2xhc3RDaGlsZCAhPT0gbnVsbCkge1xyXG4gICAgICAgIC8vSWYgY29uc3RydWN0b3IgbmFtZSBvZiBwcmV2aW91cyBjaGlsZCBub2RlLCBpcyBlcXVhbCB0byBuYW1lIG9mIGNsYXNzLFxyXG4gICAgICAgIC8vd2hvc2Ugd2UgdHJ5IHRvIGNyZWF0ZSwgaXQgbWVhbnMgbm9kZSBzaG91bGQgYmUgYWRkZWQgdG8gY3VycmVudCBwYXJlbnQuXHJcbiAgICAgICAgaWYoX2xhc3RDaGlsZC5jb25zdHJ1Y3Rvci5uYW1lID09PSBwYXJhbXMuY2xhc3MpIHtcclxuICAgICAgICAgIGNyZWF0ZUNoaWxkTm9kZShwYXJhbXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvL0lmIG5hbWVzIG9mIGNvbnN0cnVjdG9ycyBub3QgbWF0Y2gsIHRoZW4gd2UgbXVzdCBjaGVjayBpZiBuZXcgbm9kZVxyXG4gICAgICAgIC8vY2FuIGJlIGFkZGVkIGFzIGNoaWxkIHRvIG91ciBwcmV2aW91cyBjaGlsZC5cclxuICAgICAgICBlbHNlIGlmKF9sYXN0Q2hpbGQuY2FuQWRkQ2hpbGQocGFyYW1zLmNsYXNzKSkge1xyXG4gICAgICAgICAgX3BhcmVudEhpc3RvcnkudW5zaGlmdChfbGFzdENoaWxkKTtcclxuICAgICAgICAgIGNyZWF0ZUNoaWxkTm9kZShwYXJhbXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvL0ZpbmFsbHkgaWYgcHJldmlvdXMgY29uZGl0aW9ucyBhcmUgZmFsc2Ugd2UgdHJ5IGdvIGJhY2sgdG8gcHJldmlvdXNcclxuICAgICAgICAvL3BhcmVudCBub2RlLlxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgX2xhc3RDaGlsZCA9IF9wYXJlbnRIaXN0b3J5LnNoaWZ0KCl8fG51bGw7XHJcbiAgICAgICAgICBfbm9kZUNyZWF0b3IocGFyYW1zLGFzQ2hpbGQpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICAvL0lmIGxhc3QgY2hpbGQgaXMgbnVsbCwgdGhlbiB3ZSBjaGVjayBpZiBub2RlIGNhbiBiZSBhZGRlZCB0byBjdXJyZW50XHJcbiAgICAgIC8vcGFyZW50IG5vZGUuXHJcbiAgICAgIGVsc2UgaWYoX3BhcmVudEhpc3RvcnkubGVuZ3RoID4gMCAmJiBfcGFyZW50SGlzdG9yeVswXS5jYW5BZGRDaGlsZChwYXJhbXMuY2xhc3MpKSB7XHJcbiAgICAgICAgY3JlYXRlQ2hpbGROb2RlKHBhcmFtcyk7XHJcbiAgICAgIH1cclxuICAgICAgLy9JZiBsYXN0IGNoaWxkIGFuZCBsYXN0IHBhcmVudCBpcyBlcXVhbCB0byBudWxsLCB0aGVuIG5ldyBjaGlsZCBub2RlXHJcbiAgICAgIC8vY2FudCBiZSBhZGRlZCwgc28gd2UgdGhyb3cgZXJyb3IuXHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIF9lcnJvckhhbmRsZXIuc2hvd01zZyhFcnJvckNvZGUuSU5DT01QQVRJQkxFX0NISUxELHtcclxuICAgICAgICAgIGNoaWxkOnBhcmFtcy5jbGFzcyxcclxuICAgICAgICAgIHBhcmVudDogX3BhcmVudEhpc3RvcnkubGVuZ3RoID4gMFxyXG4gICAgICAgICAgICAgICAgPyBfcGFyZW50SGlzdG9yeVswXS5jb25zdHJ1Y3Rvci5uYW1lXHJcbiAgICAgICAgICAgICAgICA6ICdudWxsJ1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAvL0lmIG5vZGUgaXMgYWRkZWQgYXMgcGFyZW50LCB0aGVuIGxhc3QgY2hpbGQgaXMgc2V0IHRvIG51bGxcclxuICAgICAgLy9hbmQgcGFyZW50IGhpc3RvcnkgaXMgY2xlYXJlZC5cclxuICAgICAgX2xhc3RDaGlsZCA9IG51bGw7XHJcbiAgICAgIF9wYXJlbnRIaXN0b3J5Lmxlbmd0aCA9IDA7XHJcbiAgICAgIC8vQWZ0ZXIgdGhhdCwgbmV3IG5vZGUgaXMgY3JlYXRlZC5cclxuICAgICAgbGV0IG5vZGUgPSBfbm9kZUZhY3RvcnkocGFyYW1zLF9zZWxmKTtcclxuICAgICAgX3BhcmVudEhpc3RvcnkgPSBbbm9kZV07XHJcbiAgICAgIF9vYmplY3RQb29sLnB1c2gobm9kZSk7XHJcbiAgICB9XHJcblxyXG4gICAgX2dldFdhaXRpbmdXaXJlc0Zvck5vZGUocGFyYW1zLnV1aWQpLm1hcCgod2lyZSkgPT4ge1xyXG4gICAgICBfc2V0Q29ubmVjdGlvbih3aXJlLnR5cGUsd2lyZS50YXJnZXROb2RlLHdpcmUucmVmZXJlbmNlTm9kZSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBmdW5jdGlvbiBjcmVhdGVDaGlsZE5vZGUobm9kZVBhcmFtcykge1xyXG4gICAgICAvL1dlIGNyZWF0ZSBhIG5ldyBub2RlLCBhbmQgdGhlbiBzZXQgYXMgdGhlIGxhc3QgY2hpbGQuXHJcbiAgICAgIF9sYXN0Q2hpbGQgPSBfbm9kZUZhY3Rvcnkobm9kZVBhcmFtcyxfc2VsZik7XHJcbiAgICAgIC8vVGhlbiB3ZSBhZGQgb3VyIGZyZXNobHkgY3JlYXRlZCBub2RlIHRvIGl0cyBwYXJlbnQuXHJcbiAgICAgIF9wYXJlbnRIaXN0b3J5WzBdLmFkZENoaWxkKF9sYXN0Q2hpbGQuZ2V0SWQoKSk7XHJcbiAgICAgIC8vRmluYWxseSBuZXcgbm9kZSBpcyBhZGRlZCB0byBtYWluIHN0b3JhZ2Ugb2JqZWN0LlxyXG4gICAgICBfb2JqZWN0UG9vbC5wdXNoKF9sYXN0Q2hpbGQpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gX2dldFdhaXRpbmdXaXJlc0Zvck5vZGUobm9kZUlkKSB7XHJcbiAgICBsZXQgd2lyZXMgPSBbXTtcclxuICAgIGZvciAodmFyIGkgPSBfdGVtcFdpcmVzLmxlbmd0aCAtIDE7IGkgPj0gMCA7IGktLSkge1xyXG4gICAgICBpZihfdGVtcFdpcmVzW2ldLnJlZmVyZW5jZU5vZGUgPT09IG5vZGVJZCkge1xyXG4gICAgICAgIHdpcmVzLnB1c2goX3RlbXBXaXJlcy5zcGxpY2UoaSwxKVswXSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB3aXJlcztcclxuICB9XHJcblxyXG5cclxuICBmdW5jdGlvbiBfZ2V0Tm9kZXNCeUNsYXNzKGNsYXNzTmFtZSkge1xyXG4gICAgcmV0dXJuIF9vYmplY3RQb29sLm1hcCgobm9kZSkgPT4ge1xyXG4gICAgICByZXR1cm4gbm9kZS5jb25zdHJ1Y3Rvci5uYW1lID09PSBjbGFzc05hbWU7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEhlbHBlciBtZXRob2QgdGhhdCBpcyB1c2VkIHRvIHJlbW92ZSBub2RlcyBmcm9tIG9iamVjdCBwb29sXHJcbiAgICogYW5kIHJlc2V0IGNvbnRleHQgb2YgXCJtZXRob2QgY2hhaW5pbmdcIiBhbGdvcml0aG0uXHJcbiAgICogQHBhcmFtICB7c3RyaW5nfSBpZCAgSWQgb2Ygbm9kZSB0byBiZSByZW1vdmVkLlxyXG4gICAqL1xyXG4gIGxldCBfY2hhaW5Ob2RlUmVtb3ZlciA9IGZ1bmN0aW9uKGlkKSB7XHJcbiAgICBfbGFzdENoaWxkID0gbnVsbDtcclxuICAgIF9wYXJlbnRIaXN0b3J5Lmxlbmd0aCA9IDA7XHJcbiAgICBfcmVtb3ZlTm9kZShpZCk7XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9LFxyXG5cclxuICBfYWRkTm9kZSA9IGZ1bmN0aW9uKGNsYXNzTmFtZSxwYXJhbXMsYXNDaGlsZCkge1xyXG4gICAgcGFyYW1zLmNsYXNzID0gY2xhc3NOYW1lO1xyXG4gICAgX25vZGVDcmVhdG9yKHBhcmFtcyxhc0NoaWxkKTtcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH0sXHJcblxyXG4gIF9hZGRBY3RvciA9IGZ1bmN0aW9uKGlkLHBhcmFtcykge1xyXG4gICAgcmV0dXJuIF9jaGFpbk5vZGVDcmVhdG9yKGlkLHBhcmFtcyxmYWxzZSwnQWN0b3JOb2RlJyk7XHJcbiAgfSxcclxuXHJcbiAgX2FkZFF1ZXN0ID0gZnVuY3Rpb24oaWQscGFyYW1zKSB7XHJcbiAgICByZXR1cm4gX2NoYWluTm9kZUNyZWF0b3IoaWQscGFyYW1zLGZhbHNlLCdRdWVzdE5vZGUnKTtcclxuICB9LFxyXG5cclxuICBfYWRkRGlhbG9nID0gZnVuY3Rpb24oaWQscGFyYW1zKSB7XHJcbiAgICByZXR1cm4gX2NoYWluTm9kZUNyZWF0b3IoaWQscGFyYW1zLGZhbHNlLCdEaWFsb2dOb2RlJyk7XHJcbiAgfSxcclxuXHJcbiAgX2FkZENvbmRpdGlvbiA9IGZ1bmN0aW9uKGlkLHBhcmFtcykge1xyXG4gICAgcmV0dXJuIF9jaGFpbk5vZGVDcmVhdG9yKGlkLHBhcmFtcyxmYWxzZSwnU2NyaXB0Tm9kZScpO1xyXG4gIH0sXHJcblxyXG4gIF9hZGRWYXJpYWJsZSA9IGZ1bmN0aW9uKGlkLHBhcmFtcykge1xyXG4gICAgcmV0dXJuIF9jaGFpbk5vZGVDcmVhdG9yKGlkLHBhcmFtcyxmYWxzZSwnVmFyaWFibGVOb2RlJyk7XHJcbiAgfSxcclxuXHJcbiAgX2FkZFRhbGsgPSBmdW5jdGlvbihpZCxwYXJhbXMpIHtcclxuICAgIHJldHVybiBfY2hhaW5Ob2RlQ3JlYXRvcihpZCxwYXJhbXMsdHJ1ZSwnVGFsa05vZGUnKTtcclxuICB9LFxyXG5cclxuICBfYWRkQW5zd2VyID0gZnVuY3Rpb24oaWQscGFyYW1zKSB7XHJcbiAgICByZXR1cm4gX2NoYWluTm9kZUNyZWF0b3IoaWQscGFyYW1zLHRydWUsJ0Fuc3dlck5vZGUnKTtcclxuICB9LFxyXG5cclxuICBfc2V0V2lyZSA9IGZ1bmN0aW9uKHR5cGUscmVmZXJlbmNlTm9kZUlkKSB7XHJcbiAgICBsZXQgdGFyZ2V0Tm9kZSA9IF9sYXN0Q2hpbGQ7XHJcbiAgICBpZih0YXJnZXROb2RlID09PSBudWxsICYmIF9wYXJlbnRIaXN0b3J5Lmxlbmd0aCA+IDApIHtcclxuICAgICAgdGFyZ2V0Tm9kZSA9IF9wYXJlbnRIaXN0b3J5WzBdO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIC8qX2Vycm9ySGFuZGxlci5zaG93TXNnKEVycm9yQ29kZS5JTkNPTVBBVElCTEVfQ0hJTEQse1xyXG4gICAgICAgIGNoaWxkOmNsYXNzTmFtZSxcclxuICAgICAgICBwYXJlbnQ6IF9wYXJlbnRIaXN0b3J5Lmxlbmd0aCA+IDBcclxuICAgICAgICAgICAgICA/IF9wYXJlbnRIaXN0b3J5WzBdLmNvbnN0cnVjdG9yLm5hbWVcclxuICAgICAgICAgICAgICA6ICdudWxsJ1xyXG4gICAgICB9KTsqL1xyXG4gICAgfVxyXG4gICAgX3NldENvbm5lY3Rpb24odHlwZSx0YXJnZXROb2RlLmdldElkKCkscmVmZXJlbmNlTm9kZUlkKTtcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH0sXHJcblxyXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAvL0dFVFRFUlNcclxuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgX2dldEFjdG9ycyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIF9nZXROb2Rlc0J5Q2xhc3MoJ0FjdG9yTm9kZScpO1xyXG4gIH0sXHJcblxyXG4gIF9nZXRDb25kaXRpb25zID0gZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gX2dldE5vZGVzQnlDbGFzcygnU2NyaXB0Tm9kZScpO1xyXG4gIH0sXHJcblxyXG4gIF9nZXREaWFsb2dzID0gZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gX2dldE5vZGVzQnlDbGFzcygnRGlhbG9nTm9kZScpO1xyXG4gIH0sXHJcblxyXG4gIF9nZXRRdWVzdHMgPSBmdW5jdGlvbigpIHtcclxuICAgIHJldHVybiBfZ2V0Tm9kZXNCeUNsYXNzKCdRdWVzdE5vZGUnKTtcclxuICB9LFxyXG5cclxuICBfZ2V0VmFyaWFibGVzID0gZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gX2dldE5vZGVzQnlDbGFzcygnVmFyaWFibGVOb2RlJyk7XHJcbiAgfSxcclxuXHJcbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gIC8vTUlTQ0FMSU5FVVNcclxuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcblxyXG4gIF9zZXRWYXIgPSBmdW5jdGlvbih2YXJpYWJsZUlkLHZhbHVlKSB7XHJcbiAgICBsZXQgX3ZhciA9IF9maW5kTm9kZSh2YXJpYWJsZUlkKTtcclxuICAgIGlmKF92YXIgIT09IG51bGwpIF92YXIuc2V0VmFsdWUodmFsdWUpO1xyXG4gIH0sXHJcblxyXG4gIF9nZXRWYXIgPSBmdW5jdGlvbih2YXJpYWJsZUlkKSB7XHJcbiAgICBsZXQgX3ZhciA9IF9maW5kTm9kZSh2YXJpYWJsZUlkKTtcclxuICAgIHJldHVybiBfdmFyICE9PSBudWxsID8gX3Zhci5nZXRWYWx1ZSgpIDogdW5kZWZpbmVkO1xyXG4gIH0sXHJcblxyXG4gIF9zZXJpYWxpemVEYXRhID0gZnVuY3Rpb24oKSB7XHJcbiAgICBsZXQgZGF0YSA9IF9vYmplY3RQb29sLm1hcCgob2JqKSA9PiB7XHJcbiAgICAgIHJldHVybiBvYmouZ2V0RGF0YSA/IG9iai5nZXREYXRhKCkgOiBvYmo7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShkYXRhKTtcclxuICB9O1xyXG5cclxuICBsZXQgX3NlbGYgPSB7XHJcbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gICAgLy9HZW5lcmFsIG5vZGUgbWV0aG9kc1xyXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgIGZpbmROb2RlOiAgICAgICAgIF9maW5kTm9kZSxcclxuICAgIGFkZE5vZGU6ICAgICAgICAgIF9hZGROb2RlLFxyXG4gICAgcmVtb3ZlTm9kZTogICAgICAgX3JlbW92ZU5vZGUsXHJcblxyXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgIC8vTGluayBjcmVhdGlvbiBtZXRob2RzXHJcbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gICAgc2V0V2lyZTogICAgICAgICBfc2V0V2lyZSxcclxuXHJcbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gICAgLy9DaGFpbmFibGUgbWV0aG9kc1xyXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgIGFkZEFjdG9yOiAgICAgICAgX2FkZEFjdG9yLFxyXG4gICAgYWRkUXVlc3Q6ICAgICAgICBfYWRkUXVlc3QsXHJcbiAgICBhZGREaWFsb2c6ICAgICAgIF9hZGREaWFsb2csXHJcbiAgICBhZGRDb25kaXRpb246ICAgIF9hZGRDb25kaXRpb24sXHJcbiAgICBhZGRWYXJpYWJsZTogICAgIF9hZGRWYXJpYWJsZSxcclxuICAgIGFkZFRhbGs6ICAgICAgICAgX2FkZFRhbGssXHJcbiAgICBhZGRBbnN3ZXI6ICAgICAgIF9hZGRBbnN3ZXIsXHJcblxyXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgIC8vR2V0dGVyIG1ldGhvZHNcclxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgICBnZXRBY3RvcnM6ICAgICAgIF9nZXRBY3RvcnMsXHJcbiAgICBnZXRDb25kaXRpb25zOiAgIF9nZXRDb25kaXRpb25zLFxyXG4gICAgZ2V0RGlhbG9nczogICAgICBfZ2V0RGlhbG9ncyxcclxuICAgIGdldFF1ZXN0czogICAgICAgX2dldFF1ZXN0cyxcclxuICAgIGdldFZhcmlhYmxlczogICAgX2dldFZhcmlhYmxlcyxcclxuXHJcbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gICAgLy9NaXNjYWxpbmV1cyBtZXRob2RzXHJcbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gICAgc2V0VmFyOiAgICAgICAgICAgX3NldFZhcixcclxuICAgIGdldFZhcjogICAgICAgICAgIF9nZXRWYXIsXHJcbiAgICBzZXJpYWxpemVEYXRhOiAgICBfc2VyaWFsaXplRGF0YVxyXG4gIH07XHJcbiAgaWYoZGF0YSkgX29iamVjdFBvb2wgPSBkYXRhLm1hcCgoZCkgPT4gX25vZGVGYWN0b3J5KGQsX3NlbGYpKTtcclxuXHJcbiAgcmV0dXJuIF9zZWxmO1xyXG59O1xyXG5tb2R1bGUuZXhwb3J0cyA9IFJQR1N5c3RlbTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbmltcG9ydCBCYXNlTm9kZSBmcm9tICcuLi9jb3JlL0Jhc2VOb2RlJztcclxuaW1wb3J0IFByb3AgICBmcm9tICcuLi9jb3JlL1Byb3AnO1xyXG5cclxubGV0IEFjdG9yTm9kZSA9IChmdW5jdGlvbigpIHtcclxuICAvL1dlYWsgbWFwcyBhcmUgbmV3IGZlYXR1cmUgdG8gSmF2YVNjcmlwdC4gV2UgY2FuIHN0b3JlIHByaXZhdGVcclxuICAvL29iamVjdCBwcm9wZXJ0aWVzIGluIGtleS92YWx1ZSBwYWlycyB1c2luZyBvdXIgaW5zdGFuY2UgYXMgdGhlIGtleSxcclxuICAvL2FuZCBvdXIgY2xhc3MgY2FuIGNhcHR1cmUgdGhvc2Uga2V5L3ZhbHVlIG1hcHMgaW4gYSBjbG9zdXJlLlxyXG4gIGxldCBfbmFtZSA9IG5ldyBXZWFrTWFwKCk7XHJcbiAgbGV0IF9kaWFsb2cgPSBuZXcgV2Vha01hcCgpO1xyXG4gIC8vbGV0IF9pbnZlbnRvcnkgPSBuZXcgV2Vha01hcCgpO1xyXG5cclxuXHJcbiAgcmV0dXJuIGNsYXNzIEFjdG9yTm9kZSBleHRlbmRzIEJhc2VOb2RlIHtcclxuICAgIGNvbnN0cnVjdG9yKGRhdGEpIHtcclxuICAgICAgc3VwZXIoZGF0YSk7XHJcbiAgICAgIF9uYW1lLnNldCh0aGlzLGRhdGEgPyBkYXRhLm5hbWUgOiAnJyk7XHJcbiAgICAgIF9kaWFsb2cuc2V0KHRoaXMsZGF0YSA/IGRhdGEuZGlhbG9nIDogJycpO1xyXG4gICAgICAvL19pbnZlbnRvcnkuc2V0KHRoaXMsZGF0YS5pbnZlbnRvcnkgPyApO1xyXG4gICAgfVxyXG5cclxuICAgIGdldERhdGEoKSB7XHJcbiAgICAgIGxldCBkYXRhID0gc3VwZXIuZ2V0RGF0YSgpO1xyXG4gICAgICBkYXRhLm5hbWUgPSB0aGlzLmdldE5hbWUoKTtcclxuICAgICAgZGF0YS5kaWFsb2cgPSB0aGlzLmdldERpYWxvZygpO1xyXG4gICAgICByZXR1cm4gZGF0YTtcclxuICAgIH1cclxuXHJcbiAgICBzZXROYW1lKHZhbHVlKSB7XHJcbiAgICAgIF9uYW1lLnNldCh0aGlzLHZhbHVlKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXROYW1lKCkge1xyXG4gICAgICByZXR1cm4gX25hbWUuZ2V0KHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldERpYWxvZygpIHtcclxuICAgICAgcmV0dXJuIF9kaWFsb2cuZ2V0KHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qZ2V0SW52ZW50b3J5KCkge1xyXG4gICAgICByZXR1cm4gX2ludmVudG9yeS5nZXQodGhpcyk7XHJcbiAgICB9Ki9cclxuXHJcbiAgICBjYW5TZXRXaXJlVHlwZSh0eXBlKSB7XHJcbiAgICAgIHN3aXRjaCAodHlwZSkge1xyXG4gICAgICAgIGNhc2UgUHJvcC5ESUFMT0c6XHJcbiAgICAgICAgICByZXR1cm4gdGhpcy5nZXRXaXJlcyhQcm9wLkRJQUxPRykubGVuZ3RoID09PSAwO1xyXG4gICAgICAgIGRlZmF1bHQ6IHJldHVybiBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGRpc3Bvc2UoKSB7XHJcbiAgICAgIF9uYW1lLmRlbGV0ZSh0aGlzKTtcclxuICAgICAgX2RpYWxvZy5kZWxldGUodGhpcyk7XHJcbiAgICAgIC8vX2ludmVudG9yeS5kZWxldGUodGhpcyk7XHJcbiAgICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuICAgIH1cclxuXHJcbiAgfVxyXG59KSgpO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBBY3Rvck5vZGU7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5pbXBvcnQge1VVSUR9ICAgZnJvbSAnLi9VdGlscyc7XHJcbmltcG9ydCBQcm9wIGZyb20gJy4vUHJvcCc7XHJcblxyXG5sZXQgQmFzZU5vZGUgPSAoZnVuY3Rpb24oKXtcclxuICAvL1dlYWsgbWFwcyBhcmUgbmV3IGZlYXR1cmUgdG8gSmF2YVNjcmlwdC4gV2UgY2FuIHN0b3JlIHByaXZhdGVcclxuICAvL29iamVjdCBwcm9wZXJ0aWVzIGluIGtleS92YWx1ZSBwYWlycyB1c2luZyBvdXIgaW5zdGFuY2UgYXMgdGhlIGtleSxcclxuICAvL2FuZCBvdXIgY2xhc3MgY2FuIGNhcHR1cmUgdGhvc2Uga2V5L3ZhbHVlIG1hcHMgaW4gYSBjbG9zdXJlLlxyXG4gIGxldCBfcnBncyA9IG5ldyBXZWFrTWFwKCk7XHJcbiAgbGV0IF91dWlkID0gbmV3IFdlYWtNYXAoKTtcclxuICBsZXQgX3dpcmVzID0gbmV3IFdlYWtNYXAoKTtcclxuXHJcbiAgcmV0dXJuIGNsYXNzIEJhc2VOb2RlIHtcclxuICAgIGNvbnN0cnVjdG9yKGRhdGEscnBncykge1xyXG4gICAgICBfcnBncy5zZXQodGhpcyxycGdzKTtcclxuICAgICAgLy9JZiB1dWlkIG5vdCBwcmVzZW50LCB0aGVuIGJ5IGRlZmF1bHQgd2UgYXNzaWduIFVuaXZlcnNhbGx5IFVuaXF1ZSBJRC5cclxuICAgICAgX3V1aWQuc2V0KHRoaXMsZGF0YS51dWlkID8gZGF0YS51dWlkIDogVVVJRC5nZW5lcmF0ZSgpKTtcclxuICAgICAgX3dpcmVzLnNldCh0aGlzLGRhdGEud2lyZXMgPyBkYXRhLndpcmVzIDoge30pO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFJQR1MoKSB7XHJcbiAgICAgIHJldHVybiBfcnBncy5nZXQodGhpcyk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0SWQodmFsdWUpIHtcclxuICAgICAgX3V1aWQuc2V0KHRoaXMsdmFsdWUpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldElkKCkge1xyXG4gICAgICByZXR1cm4gX3V1aWQuZ2V0KHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIF9jaGVja0NvbmRpdGlvbihwcm9wKSB7XHJcbiAgICAgIGxldCBub2RlSWQgPSB0aGlzLmdldFdpcmVzKHByb3ApWzBdO1xyXG4gICAgICBsZXQgc2NyaXB0Tm9kZSA9IHRoaXMuZ2V0UlBHUygpLmZpbmROb2RlKG5vZGVJZCk7XHJcbiAgICAgIHJldHVybiBzY3JpcHROb2RlICE9IG51bGwgJiYgc2NyaXB0Tm9kZS5leGVjdXRlID8gc2NyaXB0Tm9kZS5leGVjdXRlKCkgOiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyBib29sZWFuIHRoYXQgcmVmbGVjdHMgdmlzaWJsaWxpdHkgc3RhdGUgb2Ygbm9kZS5cclxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59IFZpc2liaWxpdHkgc3RhdGVcclxuICAgICAqL1xyXG4gICAgaXNWaXNpYmxlKCkge1xyXG4gICAgICByZXR1cm4gdGhpcy5fY2hlY2tDb25kaXRpb24oUHJvcC5WSVNJQklMSVRZKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgYm9vbGVhbiB0aGF0IHJlZmxlY3RzIGFjdGl2aXR5IHN0YXRlIG9mIG5vZGUuXHJcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufSBBY3RpdmUgc3RhdGVcclxuICAgICAqL1xyXG4gICAgaXNBY3RpdmUoKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLl9jaGVja0NvbmRpdGlvbihQcm9wLkFDVElWSVRZKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXREYXRhKCkge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIGNsYXNzOnRoaXMuY29uc3RydWN0b3IubmFtZSxcclxuICAgICAgICB1dWlkOnRoaXMuZ2V0SWQoKSxcclxuICAgICAgICB3aXJlczpfd2lyZXMuZ2V0KHRoaXMpXHJcbiAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgY2FuQWRkQ2hpbGQodHlwZSkge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgYWRkQ2hpbGQoY2hpbGRJZCkge1xyXG5cclxuICAgIH1cclxuXHJcbiAgICByZW1vdmVDaGlsZChpbmRleCkge1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBnZXRDaGlsZChpbmRleCkge1xyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBnZXRDaGlsZHJlbigpIHtcclxuICAgICAgcmV0dXJuIFtdO1xyXG4gICAgfVxyXG5cclxuICAgIF9yZW1vdmVDaGlsZHJlbigpIHtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgY2FuU2V0V2lyZVR5cGUodHlwZSkge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgX3NldFdpcmUob2JqLHR5cGUsbm9kZUlkKSB7XHJcbiAgICAgIGlmKCFvYmouaGFzT3duUHJvcGVydHkodHlwZSkpIHtcclxuICAgICAgICBvYmpbdHlwZV0gPSBbXTtcclxuICAgICAgfVxyXG4gICAgICBvYmpbdHlwZV0ucHVzaChub2RlSWQpO1xyXG4gICAgICByZXR1cm4gb2JqO1xyXG4gICAgfVxyXG5cclxuICAgIHNldFdpcmUodHlwZSxub2RlSWQpIHtcclxuICAgICAgX3dpcmVzLnNldCh0aGlzLHRoaXMuX3NldFdpcmUoX3dpcmVzLmdldCh0aGlzKSx0eXBlLG5vZGVJZCkpO1xyXG4gICAgfVxyXG5cclxuICAgIF9nZXRXaXJlcyhvYmosdHlwZSkge1xyXG4gICAgICBpZih0eXBlKSByZXR1cm4gIW9iai5oYXNPd25Qcm9wZXJ0eSh0eXBlKSA/IFtdIDogb2JqW3R5cGVdO1xyXG4gICAgICBlbHNlIHJldHVybiBvYmo7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0V2lyZXModHlwZSkge1xyXG4gICAgICByZXR1cm4gdGhpcy5fZ2V0V2lyZXMoX3dpcmVzLmdldCh0aGlzKSx0eXBlKTtcclxuICAgIH1cclxuXHJcbiAgICBfcmVtb3ZlV2lyZShvYmosdHlwZSxub2RlSWQpIHtcclxuICAgICAgaWYob2JqLmhhc093blByb3BlcnR5KHR5cGUpKSB7XHJcbiAgICAgICAgb2JqW3R5cGVdID0gVXRpbHMucmVtb3ZlT2JqZWN0RnJvbUFycmF5KG9ialt0eXBlXSxub2RlSWQpO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBvYmo7XHJcbiAgICB9XHJcblxyXG4gICAgcmVtb3ZlV2lyZSh0eXBlLG5vZGVJZCkge1xyXG4gICAgICBfd2lyZXMuc2V0KHRoaXMsdGhpcy5fcmVtb3ZlV2lyZShfd2lyZXMuZ2V0KHRoaXMpLHR5cGUsbm9kZUlkKSk7XHJcbiAgICB9XHJcblxyXG4gICAgZGlzcG9zZSgpIHtcclxuICAgICAgX3JwZ3MuZGVsZXRlKHRoaXMpO1xyXG4gICAgICBfdXVpZC5kZWxldGUodGhpcyk7XHJcbiAgICAgIF93aXJlcy5kZWxldGUodGhpcyk7XHJcbiAgICAgIF9yZW1vdmVDaGlsZHJlbigpO1xyXG4gICAgfVxyXG4gIH07XHJcbn0pKCk7XHJcbm1vZHVsZS5leHBvcnRzID0gQmFzZU5vZGU7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5pbXBvcnQgQmFzZU5vZGUgZnJvbSAnLi4vY29yZS9CYXNlTm9kZSc7XHJcbmltcG9ydCBVdGlscyAgICBmcm9tICcuLi9jb3JlL1V0aWxzJztcclxuXHJcbmxldCBDb21wb3VuZE5vZGUgPSAoZnVuY3Rpb24oKSB7XHJcbiAgbGV0IF9jaGlsZHJlbiA9IG5ldyBXZWFrTWFwKCk7XHJcblxyXG4gIHJldHVybiBjbGFzcyBDb21wb3VuZE5vZGUgZXh0ZW5kcyBCYXNlTm9kZSB7XHJcblxyXG4gICAgY29uc3RydWN0b3IoZGF0YSxycGdzKSB7XHJcbiAgICAgIHN1cGVyKGRhdGEscnBncyk7XHJcbiAgICAgIF9jaGlsZHJlbi5zZXQodGhpcyxkYXRhLmNoaWxkcmVuID8gZGF0YS5jaGlsZHJlbiA6IFtdKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXREYXRhKCkge1xyXG4gICAgICBsZXQgZGF0YSA9IHN1cGVyLmdldERhdGEoKTtcclxuICAgICAgZGF0YS5jaGlsZHJlbiA9IHRoaXMuZ2V0Q2hpbGRyZW4oKTtcclxuICAgICAgcmV0dXJuIGRhdGE7XHJcbiAgICB9XHJcblxyXG4gICAgYWRkQ2hpbGQoY2hpbGRJZCkge1xyXG4gICAgICBsZXQgY2hpbGRyZW4gPSBfY2hpbGRyZW4uZ2V0KHRoaXMpO1xyXG4gICAgICBfY2hpbGRyZW4uc2V0KHRoaXMsVXRpbHMuYWRkT2JqZWN0VG9BcnJheShjaGlsZHJlbixjaGlsZElkKSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVtb3ZlQ2hpbGQoaW5kZXgpIHtcclxuICAgICAgbGV0IGNoaWxkcmVuID0gX2NoaWxkcmVuLmdldCh0aGlzKTtcclxuICAgICAgX2NoaWxkcmVuLnNldCh0aGlzLGNoaWxkcmVuLnNwbGljZShpbmRleCwxKSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0Q2hpbGQoaW5kZXgpIHtcclxuICAgICAgbGV0IGNoaWxkcmVuID0gX2NoaWxkcmVuLmdldCh0aGlzKTtcclxuICAgICAgcmV0dXJuIGNoaWxkcmVuLmxlbmd0aCA+IGluZGV4ID8gY2hpbGRyZW5baW5kZXhdIDogbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBnZXRDaGlsZHJlbigpIHtcclxuICAgICAgcmV0dXJuIF9jaGlsZHJlbi5nZXQodGhpcyk7XHJcbiAgICB9XHJcblxyXG4gICAgX3JlbW92ZUNoaWxkcmVuKC8qa2V5Ki8pIHtcclxuICAgICAgLy9BZGQgdmFsaWQgaW1wbGVtZW50YXRpb24uLi5cclxuICAgICAgLy90aGlzLnJlbW92ZUNoaWxkcmVuRnJvbShfY2hpbGRyZW4uZ2V0KHRoaXMpLGtleSk7XHJcbiAgICB9XHJcblxyXG4gICAgZGlzcG9zZSgpIHtcclxuICAgICAgX2NoaWxkcmVuLmRlbGV0ZSh0aGlzKTtcclxuICAgICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gICAgfVxyXG5cclxuICB9XHJcbn0pKCk7XHJcbm1vZHVsZS5leHBvcnRzID0gQ29tcG91bmROb2RlO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuXHJcbmNvbnN0IE5PREVfTk9UX0VYSVNUUyA9IDA7XHJcbmNvbnN0IENMQVNTX05PVF9ERUZJTkVEID0gMTtcclxuY29uc3QgQ09OTkVDVElPTl9UT19JVFNFTEYgPSAyO1xyXG5jb25zdCBJTVBST1BFUl9DT05ORUNUSU9OID0gMztcclxuY29uc3QgT0JKRUNUX05PVF9GT1VORCA9IDQ7XHJcbmNvbnN0IE1BTkRBVE9SWV9QQVJBTSA9IDU7XHJcbmNvbnN0IElOQ09SUkVDVF9UWVBFID0gNjtcclxuY29uc3QgSU5DT1JSRUNUX1BBUkVOVF9OT0RFID0gNztcclxuY29uc3QgSU5DT1JSRUNUX0xJTktfVEFSR0VUID0gODtcclxuY29uc3QgSU5DT01QQVRJQkxFX0NISUxEID0gOTtcclxuXHJcbmV4cG9ydHMuTk9ERV9OT1RfRVhJU1RTID0gTk9ERV9OT1RfRVhJU1RTO1xyXG5leHBvcnRzLkNMQVNTX05PVF9ERUZJTkVEID0gQ0xBU1NfTk9UX0RFRklORUQ7XHJcbmV4cG9ydHMuQ09OTkVDVElPTl9UT19JVFNFTEYgPSBDT05ORUNUSU9OX1RPX0lUU0VMRjtcclxuZXhwb3J0cy5JTVBST1BFUl9DT05ORUNUSU9OID0gSU1QUk9QRVJfQ09OTkVDVElPTjtcclxuZXhwb3J0cy5PQkpFQ1RfTk9UX0ZPVU5EID0gT0JKRUNUX05PVF9GT1VORDtcclxuZXhwb3J0cy5NQU5EQVRPUllfUEFSQU0gPSBNQU5EQVRPUllfUEFSQU07XHJcbmV4cG9ydHMuSU5DT1JSRUNUX1RZUEUgPSBJTkNPUlJFQ1RfVFlQRTtcclxuZXhwb3J0cy5JTkNPUlJFQ1RfUEFSRU5UX05PREUgPSBJTkNPUlJFQ1RfUEFSRU5UX05PREU7XHJcbmV4cG9ydHMuSU5DT1JSRUNUX0xJTktfVEFSR0VUID0gSU5DT1JSRUNUX0xJTktfVEFSR0VUO1xyXG5leHBvcnRzLklOQ09NUEFUSUJMRV9DSElMRCA9IElOQ09NUEFUSUJMRV9DSElMRDtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5pbXBvcnQgRXJyb3JDb2RlIGZyb20gJy4vRXJyb3JDb2RlJztcclxuXHJcblxyXG5sZXQgRXJyb3JIYW5kbGVyID0gZnVuY3Rpb24oZWRpdG9yKXtcclxuICByZXR1cm4ge1xyXG4gICAgc2hvd01zZzpmdW5jdGlvbihlcnJvckNvZGUscGFyYW1zKSB7XHJcbiAgICAgIGxldCBtc2cgPSAnJztcclxuICAgICAgc3dpdGNoIChlcnJvckNvZGUpIHtcclxuICAgICAgICBjYXNlIEVycm9yQ29kZS5OT0RFX05PVF9FWElTVFM6XHJcbiAgICAgICAgICBtc2cgPSBgTm9kZSBvZiB0eXBlICR7cGFyYW1zLnR5cGV9IGlzIG5vdCBkZWZpbmVkLmA7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIEVycm9yQ29kZS5DTEFTU19OT1RfREVGSU5FRDpcclxuICAgICAgICAgIG1zZyA9IGBDbGFzcyAke3BhcmFtcy5jbGFzc30gaXMgbm90IGRlZmluZWQuYDtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgRXJyb3JDb2RlLkNPTk5FQ1RJT05fVE9fSVRTRUxGOlxyXG4gICAgICAgICAgbXNnID0gYENhbm5vdCBjb25uZWN0IG5vZGUgXCIke3BhcmFtcy5ub2RlfVwiIHRvIGl0c2VsZi5gO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBFcnJvckNvZGUuSU1QUk9QRVJfQ09OTkVDVElPTjpcclxuICAgICAgICAgIG1zZyA9IGBDYW5ub3QgY3JlYXRlIGNvbm5lY3Rpb24gb2YgdHlwZSBcIiR7cGFyYW1zLnR5cGV9XCIgZnJvbSBub2RlIGlkIFwiJHtwYXJhbXMubm9kZTF9XCIgdG8gbm9kZSBpZCBcIiR7cGFyYW1zLm5vZGUyfVwiLmA7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIEVycm9yQ29kZS5PQkpFQ1RfTk9UX0ZPVU5EOlxyXG4gICAgICAgICAgbXNnID0gYENhbm5vdCBmaW5kIG9iamVjdCB3aXRoIGlkIFwiJHtwYXJhbXMuaWR9XCJgO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBFcnJvckNvZGUuTUFOREFUT1JZX1BBUkFNOlxyXG4gICAgICAgICAgbXNnID0gYFBhcmFtZXRlciBcIiR7cGFyYW1zLnBhcmFtfVwiIHdhcyBleHBlY3RlZCBidXQgaW5zdGVhZCBnb3QgdW5kZWZpbmVkLmA7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIEVycm9yQ29kZS5JTkNPUlJFQ1RfVFlQRTpcclxuICAgICAgICAgIG1zZyA9IGBXcm9uZyB0eXBlIG9mIGFyZ3VtZW50LiBFeHBlY3RlZCBcIiR7cGFyYW1zLnR5cGV9XCJgO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBFcnJvckNvZGUuSU5DT1JSRUNUX1BBUkVOVF9OT0RFOlxyXG4gICAgICAgICAgbXNnID0gYE5vZGUgb2YgdHlwZSBcIiR7cGFyYW1zLmNoaWxkfVwiIGNhbiBiZSBhZGRlZCBvbmx5IHRvIFwiJHtwYXJhbXMucGFyZW50fVwiIG5vZGUuYDtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgRXJyb3JDb2RlLklOQ09SUkVDVF9MSU5LX1RBUkdFVDpcclxuICAgICAgICAgIG1zZyA9IGBDYW5ub3QgY3JlYXRlIGxpbmsgY29ubmVjdGlvbiB0byBudWxsIG5vZGUuYDtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgRXJyb3JDb2RlLklOQ09NUEFUSUJMRV9DSElMRDpcclxuICAgICAgICAgIG1zZyA9IGBDYW5ub3QgYWRkIGNoaWxkIG9mIHR5cGUgXCIke3BhcmFtcy5jaGlsZH1cIiBpbnRvIHBhcmVudCBvZiB0eXBlIFwiJHtwYXJhbXMucGFyZW50fVwiLmA7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgbXNnID0gYFVua25vd24gZXJyb3IgY29kZSBwYXNzZWQ6ICR7ZXJyb3JDb2RlfWA7XHJcbiAgICAgIH1cclxuICAgICAgaWYoZWRpdG9yKSB7XHJcbiAgICAgICAgZWRpdG9yLnNob3dNc2cobXNnKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcclxuICAgICAgICAvL2FkZCB3YXJuaW5nIG1vZGU/XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9O1xyXG59O1xyXG5tb2R1bGUuZXhwb3J0cyA9IEVycm9ySGFuZGxlcjtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5jb25zdCBWSVNJQklMSVRZID0gJ3Zpc2liaWxpdHknO1xyXG5jb25zdCBBQ1RJVklUWSA9ICdhY3Rpdml0eSc7XHJcbmNvbnN0IEFDVElPTiA9ICdhY3Rpb24nO1xyXG5jb25zdCBHT1RPID0gJ2dvdG8nO1xyXG5jb25zdCBESUFMT0cgPSAnZGlhbG9nJztcclxuXHJcbmV4cG9ydHMuVklTSUJJTElUWSA9IFZJU0lCSUxJVFk7XHJcbmV4cG9ydHMuQUNUSVZJVFkgPSBBQ1RJVklUWTtcclxuZXhwb3J0cy5BQ1RJT04gPSBBQ1RJT047XHJcbmV4cG9ydHMuR09UTyA9IEdPVE87XHJcbmV4cG9ydHMuRElBTE9HID0gRElBTE9HO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuXHJcbi8qKlxyXG4gKiBGYXN0IFVVSUQgZ2VuZXJhdG9yLCBSRkM0MTIyIHZlcnNpb24gNCBjb21wbGlhbnQuXHJcbiAqIEBhdXRob3IgSmVmZiBXYXJkIChqY3dhcmQuY29tKS5cclxuICogQGxpY2Vuc2UgTUlUIGxpY2Vuc2VcclxuICogQGxpbmsgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xMDUwMzQvaG93LXRvLWNyZWF0ZS1hLWd1aWQtdXVpZC1pbi1qYXZhc2NyaXB0LzIxOTYzMTM2IzIxOTYzMTM2XHJcbiAqKi9cclxudmFyIFVVSUQgPSAoZnVuY3Rpb24oKSB7XHJcbiAgdmFyIHNlbGYgPSB7fTtcclxuICB2YXIgbHV0ID0gW107IGZvciAodmFyIGk9MDsgaTwyNTY7IGkrKykgeyBsdXRbaV0gPSAoaTwxNj8nMCc6JycpKyhpKS50b1N0cmluZygxNik7IH1cclxuICBzZWxmLmdlbmVyYXRlID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgZDAgPSBNYXRoLnJhbmRvbSgpKjB4ZmZmZmZmZmZ8MDtcclxuICAgIHZhciBkMSA9IE1hdGgucmFuZG9tKCkqMHhmZmZmZmZmZnwwO1xyXG4gICAgdmFyIGQyID0gTWF0aC5yYW5kb20oKSoweGZmZmZmZmZmfDA7XHJcbiAgICB2YXIgZDMgPSBNYXRoLnJhbmRvbSgpKjB4ZmZmZmZmZmZ8MDtcclxuICAgIHJldHVybiBsdXRbZDAmMHhmZl0rbHV0W2QwPj44JjB4ZmZdK2x1dFtkMD4+MTYmMHhmZl0rbHV0W2QwPj4yNCYweGZmXSsnLScrXHJcbiAgICAgIGx1dFtkMSYweGZmXStsdXRbZDE+PjgmMHhmZl0rJy0nK2x1dFtkMT4+MTYmMHgwZnwweDQwXStsdXRbZDE+PjI0JjB4ZmZdKyctJytcclxuICAgICAgbHV0W2QyJjB4M2Z8MHg4MF0rbHV0W2QyPj44JjB4ZmZdKyctJytsdXRbZDI+PjE2JjB4ZmZdK2x1dFtkMj4+MjQmMHhmZl0rXHJcbiAgICAgIGx1dFtkMyYweGZmXStsdXRbZDM+PjgmMHhmZl0rbHV0W2QzPj4xNiYweGZmXStsdXRbZDM+PjI0JjB4ZmZdO1xyXG4gIH1cclxuICByZXR1cm4gc2VsZjtcclxufSkoKTtcclxuXHJcbmV4cG9ydHMuVVVJRCA9IFVVSUQ7XHJcblxyXG5sZXQgaW5kZXhPZk9iamVjdCA9IGZ1bmN0aW9uKGFycmF5LG9iaikge1xyXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHtcclxuICAgIGlmKGFycmF5W2ldID09PSBvYmopIHJldHVybiBpO1xyXG4gIH1cclxuICByZXR1cm4gLTE7XHJcbn07XHJcblxyXG5leHBvcnRzLmluZGV4T2ZPYmplY3QgPSBpbmRleE9mT2JqZWN0O1xyXG5cclxubGV0IGdldEluZGV4QnlJZCA9IGZ1bmN0aW9uKGFycmF5LGlkKSB7XHJcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykge1xyXG4gICAgaWYoYXJyYXlbaV0uZ2V0SWQoKSA9PT0gaWQpIHJldHVybiBpO1xyXG4gIH1cclxuICByZXR1cm4gLTE7XHJcbn07XHJcbmV4cG9ydHMuZ2V0SW5kZXhCeUlkID0gZ2V0SW5kZXhCeUlkO1xyXG5cclxuZXhwb3J0cy5hZGRPYmplY3RUb0FycmF5ID0gZnVuY3Rpb24oYXJyYXksb2JqLGV4cGVjdGVkVHlwZSkge1xyXG4gIGlmKGV4cGVjdGVkVHlwZSAhPT0gdW5kZWZpbmVkICYmIGV4cGVjdGVkVHlwZSAhPT0gbnVsbCkge1xyXG4gICAgaWYoZXhwZWN0ZWRUeXBlLmlzUHJvdG90eXBlT2Yob2JqKSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1dyb25nIHR5cGUgb2Ygb2JqZWN0IHBhc3NlZC4gRXhwZWN0ZWQgJ1xyXG4gICAgICArZXhwZWN0ZWRUeXBlLmNvbnN0cnVjdG9yLm5hbWUrJyBvYmplY3QuJyk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIGlmKGluZGV4T2ZPYmplY3QoYXJyYXksb2JqKSA9PT0gLTEpIHtcclxuICAgIGFycmF5LnB1c2gob2JqKTtcclxuICB9XHJcbiAgcmV0dXJuIGFycmF5O1xyXG59O1xyXG5cclxuLypleHBvcnRzLnJlbW92ZU9iamVjdEJ5SWQgPSBmdW5jdGlvbihhcnJheSxpZCkge1xyXG4gIGxldCBpbmRleCA9IGdldEluZGV4QnlJZChhcnJheSxpZCk7XHJcbiAgaWYoaW5kZXggIT09IC0xKSB7XHJcbiAgICBsZXQgc3BsaWNlZCA9IGFycmF5LnNwbGljZShpbmRleCwxKTtcclxuICAgIGlmKHNwbGljZWQuZGlzcG9zZSkgc3BsaWNlZC5kaXNwb3NlKCk7XHJcbiAgfVxyXG4gIHJldHVybiBhcnJheTtcclxufSovXHJcblxyXG5leHBvcnRzLnJlbW92ZU9iamVjdEZyb21BcnJheSA9IGZ1bmN0aW9uKGFycmF5LG9iaikge1xyXG4gIGxldCBpbmRleCA9IGluZGV4T2ZPYmplY3QoYXJyYXksb2JqKTtcclxuICBpZihpbmRleCAhPT0gLTEpIHtcclxuICAgIGxldCBzcGxpY2VkID0gYXJyYXkuc3BsaWNlKGluZGV4LDEpO1xyXG4gICAgaWYoc3BsaWNlZC5kaXNwb3NlKSBzcGxpY2VkLmRpc3Bvc2UoKTtcclxuICB9XHJcbiAgcmV0dXJuIGFycmF5O1xyXG59O1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuaW1wb3J0IEJhc2VOb2RlIGZyb20gJy4uL2NvcmUvQmFzZU5vZGUnO1xyXG5pbXBvcnQgUHJvcCAgIGZyb20gJy4uL2NvcmUvUHJvcCc7XHJcblxyXG5sZXQgQW5zd2VyTm9kZSA9IChmdW5jdGlvbigpIHtcclxuICAvL1dlYWsgbWFwcyBhcmUgbmV3IGZlYXR1cmUgdG8gSmF2YVNjcmlwdC4gV2UgY2FuIHN0b3JlIHByaXZhdGVcclxuICAvL29iamVjdCBwcm9wZXJ0aWVzIGluIGtleS92YWx1ZSBwYWlycyB1c2luZyBvdXIgaW5zdGFuY2UgYXMgdGhlIGtleSxcclxuICAvL2FuZCBvdXIgY2xhc3MgY2FuIGNhcHR1cmUgdGhvc2Uga2V5L3ZhbHVlIG1hcHMgaW4gYSBjbG9zdXJlLlxyXG4gIGxldCBfdGV4dCA9IG5ldyBXZWFrTWFwKCk7XHJcblxyXG4gIHJldHVybiBjbGFzcyBBbnN3ZXJOb2RlIGV4dGVuZHMgQmFzZU5vZGUge1xyXG4gICAgY29uc3RydWN0b3IoZGF0YSxycGdzKSB7XHJcbiAgICAgIHN1cGVyKGRhdGEscnBncyk7XHJcbiAgICAgIF90ZXh0LnNldCh0aGlzLGRhdGEudGV4dCA/IGRhdGEudGV4dCA6ICcnKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXREYXRhKCkge1xyXG4gICAgICBsZXQgZGF0YSA9IHN1cGVyLmdldERhdGEoKTtcclxuICAgICAgZGF0YS50ZXh0ID0gdGhpcy5nZXRUZXh0KCk7XHJcbiAgICAgIHJldHVybiBkYXRhO1xyXG4gICAgfVxyXG5cclxuICAgIHNldFRleHQodmFsdWUpIHtcclxuICAgICAgX3RleHQuc2V0KHRoaXMsdmFsdWUpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFRleHQoKSB7XHJcbiAgICAgIHJldHVybiBfdGV4dC5nZXQodGhpcyk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0VGFsaygpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuZ2V0V2lyZXMoUHJvcC5HT1RPKVswXTtcclxuICAgIH1cclxuXHJcbiAgICBjYW5TZXRXaXJlVHlwZSh0eXBlKSB7XHJcbiAgICAgIHN3aXRjaCAodHlwZSkge1xyXG4gICAgICAgIGNhc2UgUHJvcC5WSVNJQklMSVRZOlxyXG4gICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0V2lyZXMoUHJvcC5WSVNJQklMSVRZKS5sZW5ndGggPT09IDA7XHJcbiAgICAgICAgY2FzZSBQcm9wLkFDVElWSVRZOlxyXG4gICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0V2lyZXMoUHJvcC5BQ1RJVklUWSkubGVuZ3RoID09PSAwO1xyXG4gICAgICAgIGNhc2UgUHJvcC5HT1RPOlxyXG4gICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0V2lyZXMoUHJvcC5HT1RPKS5sZW5ndGggPT09IDA7XHJcbiAgICAgICAgZGVmYXVsdDogcmV0dXJuIGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZGlzcG9zZSgpIHtcclxuICAgICAgX3RleHQuZGVsZXRlKHRoaXMpO1xyXG4gICAgICBzdXBlci5kaXNwb3NlKCk7XHJcbiAgICB9XHJcblxyXG4gIH07XHJcbn0pKCk7XHJcbm1vZHVsZS5leHBvcnRzID0gQW5zd2VyTm9kZTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbmltcG9ydCBDb21wb3VuZE5vZGUgZnJvbSAnLi4vY29yZS9Db21wb3VuZE5vZGUnO1xyXG5pbXBvcnQgUHJvcCAgICAgZnJvbSAnLi4vY29yZS9Qcm9wJztcclxuaW1wb3J0IFV0aWxzICAgICAgICBmcm9tICcuLi9jb3JlL1V0aWxzJztcclxuXHJcblxyXG5jb25zdCBLRVlfVEFMS1MgPSAndGFsa3MnO1xyXG5cclxubGV0IERpYWxvZ05vZGUgPSAoZnVuY3Rpb24oKSB7XHJcbiAgbGV0IF9zdGFydCA9IG5ldyBXZWFrTWFwKCk7XHJcblxyXG4gIHJldHVybiBjbGFzcyBEaWFsb2dOb2RlIGV4dGVuZHMgQ29tcG91bmROb2RlIHtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihkYXRhLHJwZ3MpIHtcclxuICAgICAgc3VwZXIoZGF0YSxycGdzKTtcclxuICAgICAgX3N0YXJ0LnNldCh0aGlzLGRhdGEuc3RhcnRUYWxrID8gZGF0YS5zdGFydFRhbGsgOiAnJyk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0RGF0YSgpIHtcclxuICAgICAgbGV0IGRhdGEgPSBzdXBlci5nZXREYXRhKCk7XHJcbiAgICAgIGRhdGEuc3RhcnRUYWxrID0gdGhpcy5nZXRTdGFydFRhbGsoKTtcclxuICAgICAgcmV0dXJuIGRhdGE7XHJcbiAgICB9XHJcblxyXG4gICAgY2FuQWRkQ2hpbGQodHlwZSkge1xyXG4gICAgICByZXR1cm4gdHlwZSA9PT0gJ1RhbGtOb2RlJztcclxuICAgIH1cclxuXHJcbiAgICBzZXRTdGFydFRhbGsodGFsa0lkKSB7XHJcbiAgICAgIF9zdGFydC5zZXQodGhpcyx0YWxrSWQpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFN0YXJ0VGFsaygpIHtcclxuICAgICAgcmV0dXJuIF9zdGFydC5nZXQodGhpcyk7XHJcbiAgICB9XHJcblxyXG4gICAgY2FuU2V0V2lyZVR5cGUodHlwZSkge1xyXG4gICAgICBzd2l0Y2ggKHR5cGUpIHtcclxuICAgICAgICBjYXNlIFByb3AuVklTSUJJTElUWTpcclxuICAgICAgICAgIHJldHVybiB0aGlzLmdldFdpcmVzKFByb3AuVklTSUJJTElUWSkubGVuZ3RoID09PSAwO1xyXG4gICAgICAgIGNhc2UgUHJvcC5BQ1RJVklUWTpcclxuICAgICAgICAgIHJldHVybiB0aGlzLmdldFdpcmVzKFByb3AuQUNUSVZJVFkpLmxlbmd0aCA9PT0gMDtcclxuICAgICAgICBkZWZhdWx0OiByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBkaXNwb3NlKCkge1xyXG4gICAgICBfc3RhcnQuZGVsZXRlKHRoaXMpO1xyXG4gICAgICBzdXBlci5kaXNwb3NlKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxufSkoKTtcclxubW9kdWxlLmV4cG9ydHMgPSBEaWFsb2dOb2RlO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuXHJcbmxldCBEaWFsb2dXYWxrZXIgPSAoZnVuY3Rpb24oKXtcclxuICBsZXQgX2N1cnJUYWxrID0gbmV3IFdlYWtNYXAoKTtcclxuICBsZXQgX3JwZ3MgPSBuZXcgV2Vha01hcCgpO1xyXG4gIGxldCBfZGlhbG9nID0gbmV3IFdlYWtNYXAoKTtcclxuXHJcbiAgcmV0dXJuIGNsYXNzIERpYWxvZ1dhbGtlciB7XHJcbiAgICBjb25zdHJ1Y3RvcihycGdzKSB7XHJcbiAgICAgIF9ycGdzLnNldCh0aGlzLHJwZ3MpO1xyXG4gICAgICBfZGlhbG9nLnNldCh0aGlzLG51bGwpO1xyXG4gICAgICBfY3VyclRhbGsuc2V0KHRoaXMsbnVsbCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVzZXQoKSB7XHJcbiAgICAgIGxldCBkaWFsb2cgPSBfZGlhbG9nLmdldCh0aGlzKTtcclxuICAgICAgaWYoZGlhbG9nICE9PSBudWxsKXtcclxuICAgICAgICB0aGlzLnNldFRhbGsoZGlhbG9nLmdldFN0YXJ0VGFsaygpKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIF9maW5kTm9kZShub2RlSWQpIHtcclxuICAgICAgcmV0dXJuIF9ycGdzLmdldCh0aGlzKS5maW5kTm9kZShub2RlSWQpO1xyXG4gICAgfVxyXG5cclxuICAgIHNldERpYWxvZyhkaWFsb2dJZCkge1xyXG4gICAgICBsZXQgZGlhbG9nID0gdGhpcy5fZmluZE5vZGUoZGlhbG9nSWQpO1xyXG4gICAgICBpZihkaWFsb2cgPT09IG51bGwpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYERpYWxvZ05vZGUgd2l0aCB0aGUgaWQgXCIke2RpYWxvZ0lkfVwiIGRvZXMgbm90IGV4aXN0cy5gKTtcclxuICAgICAgfVxyXG4gICAgICBfZGlhbG9nLnNldCh0aGlzLGRpYWxvZyk7XHJcbiAgICAgIHRoaXMucmVzZXQoKTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRUYWxrKHRhbGtJZCkge1xyXG4gICAgICBjb25zb2xlLmxvZygnc2V0VGFsaycsdGFsa0lkKTtcclxuICAgICAgbGV0IHRhbGsgPSB0aGlzLl9maW5kTm9kZSh0YWxrSWQpO1xyXG4gICAgICBpZih0YWxrID09PSBudWxsKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBUYWxrTm9kZSB3aXRoIHRoZSBpZCBcIiR7dGFsa0lkfVwiIGRvZXMgbm90IGV4aXN0cy5gKTtcclxuICAgICAgfVxyXG4gICAgICBfY3VyclRhbGsuc2V0KHRoaXMsdGFsayk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0Q29udmVyc2F0aW9uKCkge1xyXG4gICAgICBsZXQgY29udmVyc2F0aW9uID0ge307XHJcbiAgICAgIGNvbnZlcnNhdGlvbi50ZXh0ID0gX2N1cnJUYWxrLmdldCh0aGlzKS5nZXRUZXh0KCk7XHJcbiAgICAgIGxldCBjaGlsZHJlbiA9IF9jdXJyVGFsay5nZXQodGhpcykuZ2V0Q2hpbGRyZW4oKTtcclxuICAgICAgY29udmVyc2F0aW9uLm9wdGlvbnMgPSBjaGlsZHJlbi5tYXAoKGFuc3dlcklkKSA9PiB7XHJcbiAgICAgICAgbGV0IGFuc3dlciA9IHRoaXMuX2ZpbmROb2RlKGFuc3dlcklkKTtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgaWQ6YW5zd2VyLmdldElkKCksXHJcbiAgICAgICAgICB0ZXh0OmFuc3dlci5nZXRUZXh0KCksXHJcbiAgICAgICAgICBpc0FjdGl2ZTphbnN3ZXIuaXNBY3RpdmUoKSxcclxuICAgICAgICAgIGlzVmlzaWJsZTphbnN3ZXIuaXNWaXNpYmxlKClcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgICByZXR1cm4gY29udmVyc2F0aW9uO1xyXG4gICAgfVxyXG5cclxuICAgIHNlbGVjdE9wdGlvbihpZCkge1xyXG4gICAgICBsZXQgY2hpbGRyZW4gPSBfY3VyclRhbGsuZ2V0KHRoaXMpLmdldENoaWxkcmVuKCk7XHJcbiAgICAgIGxldCBhbnN3ZXJJZCA9IGNoaWxkcmVuLmZpbHRlcigoY3VycklkLGluZGV4LGFycmF5KSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIGN1cnJJZCA9PT0gaWQ7XHJcbiAgICAgIH0pO1xyXG4gICAgICBpZihhbnN3ZXJJZFswXSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgbGV0IGFuc3dlck5vZGUgPSB0aGlzLl9maW5kTm9kZShhbnN3ZXJJZFswXSk7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ3NlbGVjdE9wdGlvbjo6YW5zd2VyTm9kZScsYW5zd2VyTm9kZSxhbnN3ZXJOb2RlLmdldElkKCkpO1xyXG4gICAgICAgIGlmKGFuc3dlck5vZGUgIT09IG51bGwpIHRoaXMuc2V0VGFsayhhbnN3ZXJOb2RlLmdldFRhbGsoKSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbn0pKCk7XHJcbm1vZHVsZS5leHBvcnRzID0gRGlhbG9nV2Fsa2VyO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuaW1wb3J0IFV0aWxzICAgICAgZnJvbSAnLi4vY29yZS9VdGlscyc7XHJcbmltcG9ydCBDb21wb3VuZE5vZGUgZnJvbSAnLi4vY29yZS9Db21wb3VuZE5vZGUnO1xyXG5pbXBvcnQgUHJvcCAgIGZyb20gJy4uL2NvcmUvUHJvcCc7XHJcblxyXG5sZXQgVGFsa05vZGUgPSAoZnVuY3Rpb24oKSB7XHJcblxyXG4gIGxldCBfdGV4dCA9IG5ldyBXZWFrTWFwKCk7XHJcblxyXG4gIHJldHVybiBjbGFzcyBUYWxrTm9kZSBleHRlbmRzIENvbXBvdW5kTm9kZSB7XHJcbiAgICBjb25zdHJ1Y3RvcihkYXRhLHJwZ3MpIHtcclxuICAgICAgc3VwZXIoZGF0YSxycGdzKTtcclxuICAgICAgX3RleHQuc2V0KHRoaXMsZGF0YS50ZXh0ID8gZGF0YS50ZXh0IDogJycpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldERhdGEoKSB7XHJcbiAgICAgIGxldCBkYXRhID0gc3VwZXIuZ2V0RGF0YSgpO1xyXG4gICAgICBkYXRhLnRleHQgPSB0aGlzLmdldFRleHQoKTtcclxuICAgICAgcmV0dXJuIGRhdGE7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0VGV4dCh2YWx1ZSkge1xyXG4gICAgICBfdGV4dC5zZXQodGhpcyx2YWx1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0VGV4dCgpIHtcclxuICAgICAgcmV0dXJuIF90ZXh0LmdldCh0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICBjYW5BZGRDaGlsZCh0eXBlKSB7XHJcbiAgICAgIHJldHVybiB0eXBlID09PSAnQW5zd2VyTm9kZSc7XHJcbiAgICB9XHJcblxyXG4gICAgY2FuU2V0V2lyZVR5cGUodHlwZSkge1xyXG4gICAgICBzd2l0Y2ggKHR5cGUpIHtcclxuICAgICAgICBjYXNlIFByb3AuR09UTzpcclxuICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIGRlZmF1bHQ6IHJldHVybiBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGRpc3Bvc2UoKSB7XHJcbiAgICAgIF90ZXh0LmRlbGV0ZSh0aGlzKTtcclxuICAgICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gICAgfVxyXG4gIH07XHJcbn0pKCk7XHJcbm1vZHVsZS5leHBvcnRzID0gVGFsa05vZGU7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5cclxuaW1wb3J0IEJhc2VOb2RlICAgZnJvbSAnLi4vY29yZS9CYXNlTm9kZSc7XHJcbmltcG9ydCBQcm9wICAgZnJvbSAnLi4vY29yZS9Qcm9wJztcclxuaW1wb3J0IGNvbXBpbGVyICAgZnJvbSAnQHJpc2luZ3N0YWNrL254LWNvbXBpbGUnO1xyXG5cclxubGV0IFNjcmlwdE5vZGUgPSAoZnVuY3Rpb24oKXtcclxuICBsZXQgX2xhYmVsID0gbmV3IFdlYWtNYXAoKTtcclxuICBsZXQgX3NjcmlwdCA9IG5ldyBXZWFrTWFwKCk7XHJcbiAgbGV0IF9jb21waWxlZCA9IG5ldyBXZWFrTWFwKCk7XHJcblxyXG4gIHJldHVybiBjbGFzcyBTY3JpcHROb2RlIGV4dGVuZHMgQmFzZU5vZGUge1xyXG4gICAgY29uc3RydWN0b3IoZGF0YSxycGdzKSB7XHJcbiAgICAgIHN1cGVyKGRhdGEscnBncyk7XHJcbiAgICAgIF9sYWJlbC5zZXQodGhpcyxkYXRhLmxhYmVsID8gZGF0YS5sYWJlbCA6ICcnKTtcclxuICAgICAgX3NjcmlwdC5zZXQodGhpcyxkYXRhLnNjcmlwdCA/IGRhdGEuc2NyaXB0IDogYHJldHVybiB0cnVlO2ApO1xyXG4gICAgICBjb21waWxlci5leHBvc2UoJ2NvbnNvbGUnKTtcclxuICAgICAgX2NvbXBpbGVkLnNldCh0aGlzLGNvbXBpbGVyLmNvbXBpbGVDb2RlKF9zY3JpcHQuZ2V0KHRoaXMpKSk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0TGFiZWwodGV4dCkge1xyXG4gICAgICBfbGFiZWwuc2V0KHRoaXMsdGV4dCk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0TGFiZWwoKSB7XHJcbiAgICAgIHJldHVybiBfbGFiZWwuZ2V0KHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIHNldFNjcmlwdChzY3JpcHQpIHtcclxuICAgICAgX3NjcmlwdC5zZXQodGhpcyxzY3JpcHQpO1xyXG4gICAgICBfY29tcGlsZWQuc2V0KHRoaXMsY29tcGlsZXIuY29tcGlsZUNvZGUoX3NjcmlwdC5nZXQodGhpcykpKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRTY3JpcHQoKSB7XHJcbiAgICAgIHJldHVybiBfc2NyaXB0LmdldCh0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICBleGVjdXRlKCkge1xyXG4gICAgICByZXR1cm4gX2NvbXBpbGVkLmdldCh0aGlzKSh7cnBnczp0aGlzLmdldFJQR1MoKX0pO1xyXG4gICAgfVxyXG5cclxuICAgIGdldERhdGEoKSB7XHJcbiAgICAgIGxldCBkYXRhID0gc3VwZXIuZ2V0RGF0YSgpO1xyXG4gICAgICBkYXRhLmxhYmVsID0gdGhpcy5nZXRMYWJlbCgpO1xyXG4gICAgICBkYXRhLnNjcmlwdCA9IHRoaXMuZ2V0U2NyaXB0KCk7XHJcbiAgICAgIHJldHVybiBkYXRhO1xyXG4gICAgfVxyXG5cclxuICAgIHNldFdpcmUodHlwZSxsaW5rSWQpIHt9XHJcbiAgICBnZXRXaXJlcyh0eXBlKSB7fVxyXG4gICAgcmVtb3ZlV2lyZSh0eXBlLGxpbmtJZCkge31cclxuXHJcbiAgICBkaXNwb3NlKCkge1xyXG4gICAgICBfbGFiZWwuZGVsZXRlKHRoaXMpO1xyXG4gICAgICBfc2NyaXB0LmRlbGV0ZSh0aGlzKTtcclxuICAgICAgX2NvbXBpbGVkLmRlbGV0ZSh0aGlzKTtcclxuICAgICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gICAgfVxyXG5cclxuICB9O1xyXG59KSgpO1xyXG5tb2R1bGUuZXhwb3J0cyA9IFNjcmlwdE5vZGU7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5pbXBvcnQgQ29tcG91bmROb2RlIGZyb20gJy4uL2NvcmUvQ29tcG91bmROb2RlJztcclxuaW1wb3J0IFF1ZXN0U3RhdHVzICBmcm9tICcuL1F1ZXN0U3RhdHVzJztcclxuXHJcbmNvbnN0IEtFWV9UQVNLUyA9ICd0YXNrcydcclxuXHJcbmxldCBRdWVzdE5vZGUgPSAoZnVuY3Rpb24oKSB7XHJcbiAgbGV0IF90aXRsZSA9IG5ldyBXZWFrTWFwKCk7XHJcbiAgbGV0IF9kZXNjcmlwdGlvbiA9IG5ldyBXZWFrTWFwKCk7XHJcbiAgbGV0IF9zdGF0dXMgPSBuZXcgV2Vha01hcCgpO1xyXG5cclxuICByZXR1cm4gY2xhc3MgUXVlc3ROb2RlIGV4dGVuZHMgQ29tcG91bmROb2RlIHtcclxuICAgIGNvbnN0cnVjdG9yKGRhdGEscnBncykge1xyXG4gICAgICBzdXBlcihkYXRhLHJwZ3MpO1xyXG4gICAgICBfdGl0bGUuc2V0KHRoaXMsZGF0YS50aXRsZSA/IGRhdGEudGl0bGUgOiAnJyk7XHJcbiAgICAgIF9kZXNjcmlwdGlvbi5zZXQodGhpcyxkYXRhLmRlc2NyaXB0aW9uID8gZGF0YS5kZXNjcmlwdGlvbiA6ICcnKTtcclxuICAgICAgX3N0YXR1cy5zZXQodGhpcyxkYXRhLnN0YXR1cyA/IGRhdGEuc3RhdHVzIDogUXVlc3RTdGF0dXMuSU5DT01QTEVURSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0RGF0YSgpIHtcclxuICAgICAgbGV0IGRhdGEgPSBzdXBlci5nZXREYXRhKCk7XHJcbiAgICAgIGRhdGEudGl0bGUgPSB0aGlzLmdldFRpdGxlKCk7XHJcbiAgICAgIGRhdGEuZGVzY3JpcHRpb24gPSB0aGlzLmdldERlc2NyaXB0aW9uKCk7XHJcbiAgICAgIGRhdGEuc3RhdHVzID0gdGhpcy5nZXRTdGF0dXMoKTtcclxuICAgICAgcmV0dXJuIGRhdGE7XHJcbiAgICB9XHJcblxyXG4gICAgY2FuQWRkQ2hpbGQodHlwZSkge1xyXG4gICAgICByZXR1cm4gdHlwZSA9PT0gJ1Rhc2tOb2RlJztcclxuICAgIH1cclxuXHJcbiAgICBzZXRUaXRsZSh2YWx1ZSkge1xyXG4gICAgICBfdGl0bGUuc2V0KHRoaXMsdmFsdWUpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFRpdGxlKCkge1xyXG4gICAgICByZXR1cm4gX3RpdGxlLmdldCh0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICBzZXREZXNjcmlwdGlvbih2YWx1ZSkge1xyXG4gICAgICBfZGVzY3JpcHRpb24uc2V0KHRoaXMsdmFsdWUpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldERlc2NyaXB0aW9uKCkge1xyXG4gICAgICByZXR1cm4gX2Rlc2NyaXB0aW9uLmdldCh0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRTdGF0dXModmFsdWUpIHtcclxuICAgICAgc3dpdGNoICh2YWx1ZSkge1xyXG4gICAgICAgIGNhc2UgUXVlc3RTdGF0dXMuQ09NUExFVEVEOlxyXG4gICAgICAgIGNhc2UgUXVlc3RTdGF0dXMuRkFJTEVEOlxyXG4gICAgICAgICAgX3N0YXR1cy5zZXQodGhpcyx2YWx1ZSk7XHJcbiAgICAgICAgY2FzZSBRdWVzdFN0YXR1cy5JTkNPTVBMRVRFOlxyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICBfc3RhdHVzLnNldCh0aGlzLFF1ZXN0U3RhdHVzLklOQ09NUExFVEUpO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0U3RhdHVzKCkge1xyXG4gICAgICByZXR1cm4gX3N0YXR1cy5nZXQodGhpcyk7XHJcbiAgICB9XHJcblxyXG4gICAgZGlzcG9zZSgpIHtcclxuICAgICAgX3RpdGxlLmRlbGV0ZSh0aGlzKTtcclxuICAgICAgX2Rlc2NyaXB0aW9uLmRlbGV0ZSh0aGlzKTtcclxuICAgICAgX3N0YXR1cy5kZWxldGUodGhpcyk7XHJcbiAgICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxufSkoKTtcclxubW9kdWxlLmV4cG9ydHMgPSBRdWVzdE5vZGU7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5jb25zdCBJTkNPTVBMRVRFID0gJ3F1ZXN0SW5jb21wbGV0ZSc7XHJcbmNvbnN0IENPTVBMRVRFRCA9ICdxdWVzdENvbXBsZXRlZCc7XHJcbmNvbnN0IEZBSUxFRCA9ICdxdWVzdEZhaWxlZCc7XHJcblxyXG5leHBvcnRzLklOQ09NUExFVEUgPSBJTkNPTVBMRVRFO1xyXG5leHBvcnRzLkNPTVBMRVRFRCA9IENPTVBMRVRFRDtcclxuZXhwb3J0cy5GQUlMRUQgPSBGQUlMRUQ7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5pbXBvcnQgQmFzZU5vZGUgZnJvbSAnLi4vY29yZS9CYXNlTm9kZSc7XHJcblxyXG5sZXQgVGFza05vZGUgPSAoZnVuY3Rpb24oKXtcclxuICByZXR1cm4gY2xhc3MgVGFza05vZGUgZXh0ZW5kcyBCYXNlTm9kZSB7XHJcbiAgICBjb25zdHJ1Y3RvcihkYXRhKSB7XHJcbiAgICAgIHN1cGVyKGRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vdG8gZG9cclxuICB9O1xyXG59KSgpO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBUYXNrTm9kZTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbmltcG9ydCBCYXNlTm9kZSBmcm9tICcuLi9jb3JlL0Jhc2VOb2RlJztcclxuaW1wb3J0IFZhcmlhYmxlVHlwZSBmcm9tICcuL1ZhcmlhYmxlVHlwZSc7XHJcblxyXG5sZXQgVmFyaWFibGVOb2RlID0gKGZ1bmN0aW9uKCl7XHJcbiAgbGV0IF92YWx1ZSA9IG5ldyBXZWFrTWFwKCk7XHJcbiAgbGV0IF90eXBlID0gbmV3IFdlYWtNYXAoKTtcclxuXHJcbiAgZnVuY3Rpb24gX3BhcnNlQm9vbGVhbih2YWwpIHtcclxuICAgIGxldCBpc0Jvb2wgPSB0eXBlb2YgdmFsID09PSBWYXJpYWJsZVR5cGUuQk9PTEVBTjtcclxuICAgIGlmKGlzQm9vbCkge1xyXG4gICAgICByZXR1cm4gdmFsO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgc3dpdGNoKFN0cmluZyh2YWwpLnRvTG93ZXJDYXNlKCkudHJpbSgpKXtcclxuICAgICAgICBjYXNlIFwidHJ1ZVwiOiBjYXNlIFwieWVzXCI6IGNhc2UgXCIxXCI6IHJldHVybiB0cnVlO1xyXG4gICAgICAgIGNhc2UgXCJmYWxzZVwiOiBjYXNlIFwibm9cIjogY2FzZSBcIjBcIjogY2FzZSBudWxsOiByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgZGVmYXVsdDogcmV0dXJuIEJvb2xlYW4odmFsKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gX3BhcnNlU3RyaW5nKHZhbCkge1xyXG4gICAgcmV0dXJuIHR5cGVvZiB2YWwgPT09IFZhcmlhYmxlVHlwZS5TVFJJTkcgPyB2YWwgOiBTdHJpbmcodmFsKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIF9wYXJzZU51bWJlcih2YWwpIHtcclxuICAgIHJldHVybiB0eXBlb2YgdmFsID09PSBWYXJpYWJsZVR5cGUuTlVNQkVSID8gdmFsIDogcGFyc2VGbG9hdCh2YWwpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gX3BhcnNlVmFsdWUodmFsLHR5cGUpIHtcclxuICAgIHN3aXRjaCAodHlwZSkge1xyXG4gICAgICBjYXNlIFZhcmlhYmxlVHlwZS5CT09MRUFOOlxyXG4gICAgICAgIHJldHVybiBfcGFyc2VCb29sZWFuKHZhbCk7XHJcbiAgICAgIGNhc2UgVmFyaWFibGVUeXBlLk5VTUJFUjpcclxuICAgICAgICByZXR1cm4gX3BhcnNlTnVtYmVyKHZhbCk7XHJcbiAgICAgIGNhc2UgVmFyaWFibGVUeXBlLlNUUklORzpcclxuICAgICAgZGVmYXVsdDpcclxuICAgICAgICByZXR1cm4gX3BhcnNlU3RyaW5nKHZhbCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gY2xhc3MgVmFyaWFibGVOb2RlIGV4dGVuZHMgQmFzZU5vZGUge1xyXG4gICAgY29uc3RydWN0b3IoZGF0YSxycGdzKSB7XHJcbiAgICAgIHN1cGVyKGRhdGEscnBncyk7XHJcbiAgICAgIF90eXBlLnNldCh0aGlzLCBkYXRhLmhhc093blByb3BlcnR5KCd0eXBlJykgPyBkYXRhLnR5cGUgOiBWYXJpYWJsZVR5cGUuU1RSSU5HKTtcclxuICAgICAgX3ZhbHVlLnNldCh0aGlzLCBkYXRhLmhhc093blByb3BlcnR5KCd2YWx1ZScpID8gX3BhcnNlVmFsdWUoZGF0YS52YWx1ZSxfdHlwZS5nZXQodGhpcykpIDogJycpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldERhdGEoKSB7XHJcbiAgICAgIGxldCBkYXRhID0gc3VwZXIuZ2V0RGF0YSgpO1xyXG4gICAgICBkYXRhLnR5cGUgPSB0aGlzLmdldFR5cGUoKTtcclxuICAgICAgZGF0YS52YWx1ZSA9IHRoaXMuZ2V0VmFsdWUoKTtcclxuICAgICAgcmV0dXJuIGRhdGE7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0VmFsdWUodmFsKSB7XHJcbiAgICAgIF92YWx1ZS5zZXQodGhpcyxfcGFyc2VWYWx1ZSh2YWwsX3R5cGUuZ2V0KHRoaXMpKSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0VmFsdWUoKSB7XHJcbiAgICAgIHJldHVybiBfdmFsdWUuZ2V0KHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFR5cGUoKSB7XHJcbiAgICAgIHJldHVybiBfdHlwZS5nZXQodGhpcyk7XHJcbiAgICB9XHJcblxyXG4gICAgY2FuU2V0V2lyZVR5cGUodHlwZSkge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgZGlzcG9zZSgpIHtcclxuICAgICAgX3ZhbHVlLmRlbGV0ZSh0aGlzKTtcclxuICAgICAgX3R5cGUuZGVsZXRlKHRoaXMpO1xyXG4gICAgICBzdXBlci5kaXNwb3NlKCk7XHJcbiAgICB9XHJcbiAgfTtcclxufSkoKTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gVmFyaWFibGVOb2RlO1xyXG4iLCJjb25zdCBCT09MRUFOID0gJ2Jvb2xlYW4nO1xyXG5jb25zdCBTVFJJTkcgPSAnc3RyaW5nJztcclxuY29uc3QgTlVNQkVSID0gJ251bWJlcic7XHJcblxyXG5leHBvcnRzLkJPT0xFQU4gPSBCT09MRUFOO1xyXG5leHBvcnRzLlNUUklORyA9IFNUUklORztcclxuZXhwb3J0cy5OVU1CRVIgPSBOVU1CRVI7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5pbXBvcnQgZGF0YSBmcm9tICcuLi9kYXRhL2RhdGEuanNvbic7XHJcbmltcG9ydCBSUEdTeXN0ZW0gZnJvbSAnLi9ycGdzL1JQR1N5c3RlbSc7XHJcbmltcG9ydCBEaWFsb2dXYWxrZXIgZnJvbSAnLi9ycGdzL2RpYWxvZ3MvRGlhbG9nV2Fsa2VyJztcclxuXHJcbihmdW5jdGlvbiAoJCwgd2luZG93LCBkb2N1bWVudCwgdW5kZWZpbmVkKSB7XHJcbiAgJChmdW5jdGlvbiAoKSB7XHJcbiAgICBsZXQgcnBnczEgPSBuZXcgUlBHU3lzdGVtKCk7XHJcbiAgICBycGdzMVxyXG4gICAgLmFkZEFjdG9yKCdhY3QxJyx7bmFtZTonQWRhbSd9KS5zZXRXaXJlKCdkaWFsb2cnLCdkbGcxJylcclxuICAgIC5hZGRDb25kaXRpb24oJ2NvbmQxJyx7c2NyaXB0OmByZXR1cm4gcnBncy5nZXRWYXIoJ2IxJyk7YH0pXHJcbiAgICAuYWRkRGlhbG9nKCdkbGcxJyx7c3RhcnRUYWxrOid0bGswJ30pXHJcbiAgICAgIC5hZGRUYWxrKCd0bGswJyx7dGV4dDonVGhpcyBpcyB0YWxrIDAuJ30pXHJcbiAgICAgICAgLmFkZEFuc3dlcigndGxrMGFuczEnLHt0ZXh0OidBbnN3ZXIxJ30pLnNldFdpcmUoJ3Zpc2liaWxpdHknLCdjb25kMScpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnNldFdpcmUoJ2dvdG8nLCd0bGsxJylcclxuICAgICAgICAuYWRkQW5zd2VyKCd0bGswYW5zMicse3RleHQ6J0Fuc3dlcjInfSkuc2V0V2lyZSgnZ290bycsJ3RsazInKVxyXG4gICAgICAgIC5hZGRBbnN3ZXIoJ3RsazBhbnMzJyx7dGV4dDonQW5zd2VyMyd9KS5zZXRXaXJlKCdnb3RvJywndGxrMycpXHJcblxyXG4gICAgICAuYWRkVGFsaygndGxrMScse3RleHQ6J1RoaXMgaXMgdGFsayAxLid9KVxyXG4gICAgICAgIC5hZGRBbnN3ZXIoJ3RsazFhbnMxJyx7dGV4dDonQW5zd2VyMSd9KVxyXG5cclxuICAgICAgLmFkZFRhbGsoJ3RsazInLHt0ZXh0OidUaGlzIGlzIHRhbGsgMi4nfSlcclxuICAgICAgICAuYWRkQW5zd2VyKCd0bGsyYW5zMScse3RleHQ6J0Fuc3dlcjEnfSlcclxuXHJcbiAgICAgIC5hZGRUYWxrKCd0bGszJyx7dGV4dDonVGhpcyBpcyB0YWxrIDMuJ30pXHJcbiAgICAgICAgLmFkZEFuc3dlcigndGxrM2FuczEnLHt0ZXh0OidBbnN3ZXIxJ30pXHJcbiAgICAuYWRkVmFyaWFibGUoJ2IxJyx7dHlwZTonYm9vbGVhbicsdmFsdWU6ZmFsc2V9KVxyXG4gICAgLmFkZFZhcmlhYmxlKCdzMScse3R5cGU6J3N0cmluZycsdmFsdWU6J1RoaXMgaXMgbWVzc2FnZSBmcm9tIGNvbXBpbGVkIGNvZGUhJ30pXHJcbiAgICAuYWRkVmFyaWFibGUoJ24xJyx7dHlwZTonbnVtYmVyJyx2YWx1ZTo1Nn0pXHJcblxyXG4gICAgbGV0IGNvbmQgPSBycGdzMS5maW5kTm9kZSgnY29uZDEnKTtcclxuICAgIGxldCBiMSA9IHJwZ3MxLmZpbmROb2RlKCdiMScpO1xyXG4gICAgbGV0IHMxID0gcnBnczEuZmluZE5vZGUoJ3MxJyk7XHJcbiAgICBsZXQgbjEgPSBycGdzMS5maW5kTm9kZSgnbjEnKTtcclxuXHJcbiAgICBsZXQgcnBnczFTZXJpYWxpemVkID0gcnBnczEuc2VyaWFsaXplRGF0YSgpO1xyXG4gICAgY29uc29sZS5sb2coXCJycGdzMVwiLHJwZ3MxU2VyaWFsaXplZCk7XHJcblxyXG4gICAgbGV0IHJwZ3MyID0gbmV3IFJQR1N5c3RlbShKU09OLnBhcnNlKHJwZ3MxU2VyaWFsaXplZCkpO1xyXG5cclxuICAgIGxldCBycGdzMlNlcmlhbGl6ZWQgPSBycGdzMi5zZXJpYWxpemVEYXRhKCk7XHJcbiAgICBjb25zb2xlLmxvZyhcInJwZ3MyXCIscnBnczJTZXJpYWxpemVkKTtcclxuXHJcbiAgICBjb25zb2xlLmxvZyhcImRhdGEgY3JlYXRlZCBpcyBlcXVhbCB0byBkYXRhIHBhcnNlZDpcIixycGdzMVNlcmlhbGl6ZWQgPT09IHJwZ3MyU2VyaWFsaXplZCk7XHJcblxyXG4gICAgbGV0IHdhbGtlciA9IG5ldyBEaWFsb2dXYWxrZXIocnBnczIpO1xyXG4gICAgd2Fsa2VyLnNldERpYWxvZygnZGxnMScpO1xyXG4gICAgY29uc29sZS5sb2coJ2NvbnZlcnNhdGlvbjE6Jyx3YWxrZXIuZ2V0Q29udmVyc2F0aW9uKCkpO1xyXG4gICAgd2Fsa2VyLnNlbGVjdE9wdGlvbigndGxrMGFuczEnKTtcclxuICAgIGNvbnNvbGUubG9nKCdjb252ZXJzYXRpb24yOicsd2Fsa2VyLmdldENvbnZlcnNhdGlvbigpKTtcclxuICB9KTtcclxuXHJcbn0pKGpRdWVyeSwgd2luZG93LCBkb2N1bWVudCk7XHJcbiJdfQ==
